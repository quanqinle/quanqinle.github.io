[{"title":"Welcome to QuanQinle Blog","url":"/2020/05/27/build-my-github-blog/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>开始试用Github io作为blog。</p>\n<p>blog模板试用Hux的，现在原模板中的很多东西还没删，先简单试用吧。</p>\n<h2 id=\"试用markdown\"><a href=\"#试用markdown\" class=\"headerlink\" title=\"试用markdown\"></a>试用markdown</h2><p>【简明版】有道云笔记Markdown指南 <a href=\"http://note.youdao.com/iyoudao/?p=2411\">http://note.youdao.com/iyoudao/?p=2411</a></p>\n<p>【进阶版】有道云笔记Markdown指南 <a href=\"http://note.youdao.com/iyoudao/?p=2445\">http://note.youdao.com/iyoudao/?p=2445</a></p>\n<p>有道md的底层^[我是一个注解]依赖讲解：<br><a href=\"https://github.com/mermaid-js/mermaid\">https://github.com/mermaid-js/mermaid</a></p>\n<p><kbd>Ctrl</kbd> + <kbd>T</kbd> : New tab dialog (maybe you want to open cmd as admin?)</p>\n<p>表格内换行用<code>&lt;br&gt;</code></p>\n<p>Latex数学公式（<a href=\"http://mohu.org/info/symbols/symbols.htm%EF%BC%89\">http://mohu.org/info/symbols/symbols.htm）</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">e^&#123;x^2&#125;\\neq&#123;e^x&#125;^2</span><br><span class=\"line\"></span><br><span class=\"line\">H(D_2) &#x3D; -(\\frac&#123;2&#125;&#123;4&#125;\\ log_2 \\frac&#123;2&#125;&#123;4&#125; + \\frac&#123;2&#125;&#123;4&#125;\\ log_2 \\frac&#123;2&#125;&#123;4&#125;) &#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">        \\begin&#123;pmatrix&#125;</span><br><span class=\"line\">        1 &amp; a_1 &amp; a_1^2 &amp; \\cdots &amp; a_1^n \\\\</span><br><span class=\"line\">        1 &amp; a_2 &amp; a_2^2 &amp; \\cdots &amp; a_2^n \\\\</span><br><span class=\"line\">        \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\</span><br><span class=\"line\">        1 &amp; a_m &amp; a_m^2 &amp; \\cdots &amp; a_m^n \\\\</span><br><span class=\"line\">        \\end&#123;pmatrix&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">graph TD</span><br><span class=\"line\">A[&quot;点【小绿旗】开始&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">subgraph 循环</span><br><span class=\"line\">    B(&quot;出现在舞台顶部&quot;)</span><br><span class=\"line\">    C(&quot;向下移动&quot;)</span><br><span class=\"line\">    D(&quot;碰到舞台底部&quot;)</span><br><span class=\"line\">    E(&quot;消失&quot;)</span><br><span class=\"line\">    F(&quot;碰到兔子&quot;)</span><br><span class=\"line\">    G(&quot;加1分&quot;)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">Z[&quot;点【红点】结束&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">A--&gt;B</span><br><span class=\"line\">B--&gt;C</span><br><span class=\"line\">C--&gt;D</span><br><span class=\"line\">D--&gt;E</span><br><span class=\"line\">C--&gt;F</span><br><span class=\"line\">F--&gt;G</span><br><span class=\"line\">G--&gt;E</span><br><span class=\"line\">E--&gt;B</span><br><span class=\"line\">E--&gt;Z</span><br><span class=\"line\"></span><br><span class=\"line\">classDef directNode fill:#f00,stroke:#333,stroke-width:1px;</span><br><span class=\"line\">class C directNode;</span><br><span class=\"line\">classDef endPointNode fill:#f9f,stroke:#333,stroke-width:1px;</span><br><span class=\"line\">class A,Z endPointNode;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"An-h1-header\"><a href=\"#An-h1-header\" class=\"headerlink\" title=\"An h1 header\"></a>An h1 header</h1><p>Paragraphs are separated by a blank line.</p>\n<p>2nd paragraph. <em>Italic</em>, <strong>bold</strong>, and <code>monospace</code>. Itemized lists<br>look like:</p>\n<ul>\n<li>this one</li>\n<li>that one</li>\n<li>the other one</li>\n</ul>\n<p>Note that — not considering the asterisk — the actual text<br>content starts at 4-columns in.</p>\n<blockquote>\n<p>Block quotes are<br>written like so.</p>\n<p>They can span multiple paragraphs,<br>if you like.</p>\n</blockquote>\n<p>Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., “it’s all<br>in chapters 12–14”). Three dots … will be converted to an ellipsis.<br>Unicode is supported. ☺</p>\n<h2 id=\"An-h2-header\"><a href=\"#An-h2-header\" class=\"headerlink\" title=\"An h2 header\"></a>An h2 header</h2><p>Here’s a numbered list:</p>\n<ol>\n<li>first item</li>\n<li>second item</li>\n<li>third item</li>\n</ol>\n<p>Note again how the actual text starts at 4 columns in (4 characters<br>from the left side). Here’s a code sample:</p>\n<pre><code># Let me re-iterate ...\nfor i in 1 .. 10 &#123; do-something(i) &#125;\n</code></pre>\n<p>As you probably guessed, indented 4 spaces. By the way, instead of<br>indenting the block, you can use delimited blocks, if you like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">define foobar() &#123;</span><br><span class=\"line\">    print &quot;Welcome to flavor country!&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(which makes copying &amp; pasting easier). You can optionally mark the<br>delimited block for Pandoc to syntax highlight it:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"comment\"># Quick, count to ten!</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"comment\"># (but not *too* quick)</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> i</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"An-h3-header\"><a href=\"#An-h3-header\" class=\"headerlink\" title=\"An h3 header\"></a>An h3 header</h3><p>Now a nested list:</p>\n<ol>\n<li><p>First, get these ingredients:</p>\n<ul>\n<li>carrots</li>\n<li>celery</li>\n<li>lentils</li>\n</ul>\n</li>\n<li><p>Boil some water.</p>\n</li>\n<li><p>Dump everything in the pot and follow<br>this algorithm:</p>\n<pre><code>find wooden spoon\nuncover pot\nstir\ncover pot\nbalance wooden spoon precariously on pot handle\nwait 10 minutes\ngoto first step (or shut off burner when done)\n</code></pre>\n<p>Do not bump wooden spoon or it will fall.</p>\n</li>\n</ol>\n<p>Notice again how text always lines up on 4-space indents (including<br>that last line which continues item 3 above).</p>\n<p>Here’s a link to <a href=\"http://foo.bar/\">a website</a>, to a <a href=\"local-doc.html\">local<br>doc</a>, and to a <a href=\"#an-h2-header\">section heading in the current<br>doc</a>. Here’s a footnote [^1].</p>\n<p>[^1]: Footnote text goes here.</p>\n<p>Tables can look like this:</p>\n<p>size  material      color</p>\n<hr>\n<p>9     leather       brown<br>10    hemp canvas   natural<br>11    glass         transparent</p>\n<p>Table: Shoes, their sizes, and what they’re made of</p>\n<p>(The above is the caption for the table.) Pandoc also supports<br>multi-line tables:</p>\n<hr>\n<p>keyword   text</p>\n<hr>\n<p>red       Sunsets, apples, and<br>          other red or reddish<br>          things.</p>\n<p>green     Leaves, grass, frogs<br>          and other things it’s<br>          not easy being.</p>\n<hr>\n<p>A horizontal rule follows.</p>\n<hr>\n<p>Here’s a definition list:</p>\n<p>apples<br>  : Good for making applesauce.</p>\n<p>oranges<br>  : Citrus!</p>\n<p>tomatoes<br>  : There’s no “e” in tomatoe.</p>\n<p>Again, text is indented 4 spaces. (Put a blank line between each<br>term/definition pair to spread things out more.)</p>\n<p>Here’s a “line block”:</p>\n<p>| Line one<br>|   Line too<br>| Line tree</p>\n<p>and images can be specified like so:</p>\n<p><img data-src=\"http://img3.duitang.com/uploads/item/201208/18/20120818150713_zarnG.thumb.700_0.jpeg\" alt=\"Luffy\" title=\"An exemplary image\"></p>\n<p>Inline math equations go in like so: $\\omega = d\\phi / dt$. Display<br>math should get its own line and be put in in double-dollarsigns:</p>\n<p>$$I = \\int \\rho R^{2} dV$$</p>\n<p>And note that you can backslash-escape any punctuation characters<br>which you wish to be displayed literally, ex.: `foo`, *bar*, etc.</p>\n<hr>\n<h1 id=\"An-exhibit-of-Markdown\"><a href=\"#An-exhibit-of-Markdown\" class=\"headerlink\" title=\"An exhibit of Markdown\"></a>An exhibit of Markdown</h1><p>This note demonstrates some of what <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a> is capable of doing.</p>\n<p><em>Note: Feel free to play with this page. Unlike regular notes, this doesn’t automatically save itself.</em></p>\n<h2 id=\"Basic-formatting\"><a href=\"#Basic-formatting\" class=\"headerlink\" title=\"Basic formatting\"></a>Basic formatting</h2><p>Paragraphs can be written like so. A paragraph is the basic block of Markdown. A paragraph is what text will turn into when there is no reason it should become anything else.</p>\n<p>Paragraphs must be separated by a blank line. Basic formatting of <em>italics</em> and <strong>bold</strong> is supported. This <em>can be <strong>nested</strong> like</em> so.</p>\n<h2 id=\"Lists\"><a href=\"#Lists\" class=\"headerlink\" title=\"Lists\"></a>Lists</h2><h3 id=\"Ordered-list\"><a href=\"#Ordered-list\" class=\"headerlink\" title=\"Ordered list\"></a>Ordered list</h3><ol>\n<li>Item 1</li>\n<li>A second item</li>\n<li>Number 3</li>\n<li>Ⅳ</li>\n</ol>\n<p><em>Note: the fourth item uses the Unicode character for <a href=\"http://www.fileformat.info/info/unicode/char/2163/index.htm\">Roman numeral four</a>.</em></p>\n<h3 id=\"Unordered-list\"><a href=\"#Unordered-list\" class=\"headerlink\" title=\"Unordered list\"></a>Unordered list</h3><ul>\n<li>An item</li>\n<li>Another item</li>\n<li>Yet another item</li>\n<li>And there’s more…</li>\n</ul>\n<h2 id=\"Paragraph-modifiers\"><a href=\"#Paragraph-modifiers\" class=\"headerlink\" title=\"Paragraph modifiers\"></a>Paragraph modifiers</h2><h3 id=\"Code-block\"><a href=\"#Code-block\" class=\"headerlink\" title=\"Code block\"></a>Code block</h3><pre><code>Code blocks are very useful for developers and other people who look at code or other things that are written in plain text. As you can see, it uses a fixed-width font.\n</code></pre>\n<p>You can also make <code>inline code</code> to add code into other things.</p>\n<h3 id=\"Quote\"><a href=\"#Quote\" class=\"headerlink\" title=\"Quote\"></a>Quote</h3><blockquote>\n<p>Here is a quote. What this is should be self explanatory. Quotes are automatically indented when they are used.</p>\n</blockquote>\n<h2 id=\"Headings\"><a href=\"#Headings\" class=\"headerlink\" title=\"Headings\"></a>Headings</h2><p>There are six levels of headings. They correspond with the six levels of HTML headings. You’ve probably noticed them already in the page. Each level down uses one more hash character.</p>\n<h3 id=\"Headings-can-also-contain-formatting\"><a href=\"#Headings-can-also-contain-formatting\" class=\"headerlink\" title=\"Headings can also contain formatting\"></a>Headings <em>can</em> also contain <strong>formatting</strong></h3><h3 id=\"They-can-even-contain-inline-code\"><a href=\"#They-can-even-contain-inline-code\" class=\"headerlink\" title=\"They can even contain inline code\"></a>They can even contain <code>inline code</code></h3><p>Of course, demonstrating what headings look like messes up the structure of the page.</p>\n<p>I don’t recommend using more than three or four levels of headings here, because, when you’re smallest heading isn’t too small, and you’re largest heading isn’t too big, and you want each size up to look noticeably larger and more important, there there are only so many sizes that you can use.</p>\n<h2 id=\"URLs\"><a href=\"#URLs\" class=\"headerlink\" title=\"URLs\"></a>URLs</h2><p>URLs can be made in a handful of ways:</p>\n<ul>\n<li>A named link to <a href=\"http://www.markitdown.net/\">MarkItDown</a>. The easiest way to do these is to select what you want to make a link and hit <code>Ctrl+L</code>.</li>\n<li>Another named link to <a href=\"http://www.markitdown.net/\">MarkItDown</a></li>\n<li>Sometimes you just want a URL like <a href=\"http://www.markitdown.net/\">http://www.markitdown.net/</a>.</li>\n</ul>\n<h2 id=\"Horizontal-rule\"><a href=\"#Horizontal-rule\" class=\"headerlink\" title=\"Horizontal rule\"></a>Horizontal rule</h2><p>A horizontal rule is a line that goes across the middle of the page.</p>\n<hr>\n<p>It’s sometimes handy for breaking things up.</p>\n<h2 id=\"Images\"><a href=\"#Images\" class=\"headerlink\" title=\"Images\"></a>Images</h2><p>Markdown can also contain images. I’ll need to add something here sometime.</p>\n<h2 id=\"Finally\"><a href=\"#Finally\" class=\"headerlink\" title=\"Finally\"></a>Finally</h2><p>There’s actually a lot more to Markdown than this. See the official <a href=\"http://daringfireball.net/projects/markdown/basics\">introduction</a> and <a href=\"http://daringfireball.net/projects/markdown/syntax\">syntax</a> for more information. However, be aware that this is not using the official implementation, and this might work subtly differently in some of the little things.</p>\n"},{"title":"Selenium | 编写爬虫抓取网页图片遭遇懒加载","url":"/2020/06/04/How-to-handle-LazyLoad-page-when-use-Selenium/","content":"<blockquote>\n<p>缘起：</p>\n<p>最近想重看一遍漫画《海贼王》，腾讯动漫上有完整的免费资源，先是在腾讯上看了一阵，后来又找了一个海贼小站的专门论坛，在其上的阅读体验更简洁一些。但是，无论网页怎样简化，浏览器的框架和网站的广告总是躲不掉，占据着阅读的视野。<br>于是，就想着把漫画所有的图片抓取到本地磁盘，然后通过图片查看器开全屏，悠哉悠哉地看……漫……画……</p>\n</blockquote>\n<p>有了需求，说干就干。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Python实现爬虫，第1版\"><a href=\"#Python实现爬虫，第1版\" class=\"headerlink\" title=\"Python实现爬虫，第1版\"></a>Python实现爬虫，第1版</h1><p>这段时间又重新把Python用起来了，想的是如果什么问题都用Java解决，方式太重了，而且手里常备一个熟练的动态语言也是极其必要的，所以，稍微简单的任务，比如，文本处理、批量修改文件等，都改用Python了。另外，我在github上维护了一个<a href=\"https://github.com/quanqinle/my-python\">pythong小工具工程</a>，专门存放日常用到的Python脚本，留档下来方便以后遇到类似问题可以拿来直接用。</p>\n<p>所以，这次的漫画图片抓取，我计划用Python编码实现。</p>\n<p>此前已经编写过类似的网页文字和多媒体爬取脚本，见上面提到github工程中的<code>download_mp3_and_dialog.py</code>文件，它使用的是Lxml库。著名的网页抓取方式还有Beautiful Soup和正则等，当然，也可以用更强大了爬虫框架，只是，我的需求太简单，杀鸡焉用牛刀。</p>\n<p>Python编码部分不复杂，编程主要的工作其实在分析网页结构，找到图片下载链接这些工作上。</p>\n<h2 id=\"网页分析，CSS元素定位\"><a href=\"#网页分析，CSS元素定位\" class=\"headerlink\" title=\"网页分析，CSS元素定位\"></a>网页分析，CSS元素定位</h2><p>为了下载漫画，我们分析网页需要搞清楚3部分有用的内容。</p>\n<h3 id=\"1-动漫每话的网页地址\"><a href=\"#1-动漫每话的网页地址\" class=\"headerlink\" title=\"1.动漫每话的网页地址\"></a>1.动漫每话的网页地址</h3><p>经过分析，我发现这个网站在组织每话的url时，规则非常简单且规整。比如，第1话是<code>www.fuckgfw.com/onepiece/0001</code>，那么，第188话就是<code>www.fuckgfw.com/onepiece/0188</code>，以此类推。</p>\n<p>再找到《海贼王》当前的最后一话是917话，剩下的就是for循环和字符串拼接了。</p>\n<blockquote>\n<p>重要说明！！！</p>\n<p>本文仅是技术分享，为了避免有人阅读本文后拿人家的网站做测试，本文隐去抓取的网站域名。这事儿咱一个人干也就干了，可不好传播~~</p>\n</blockquote>\n<h3 id=\"2-每话的题目\"><a href=\"#2-每话的题目\" class=\"headerlink\" title=\"2.每话的题目\"></a>2.每话的题目</h3><p>页面顶部就有漫画每话的题目，在页面源码中搜索后可以确认 <code>span标签的class属性值title-comicHeading</code> 在页面中是唯一的，我们就用它来定位元素，然后获取元素上的文本。</p>\n<p>标题的CSS Selector语法是 <code>span.title-comicHeading</code> 。</p>\n<p><img data-src=\"/images/in-post/selenium-lazyload/selenium-lazyload-02.webp\" alt=\"imag\"></p>\n<h3 id=\"3-每话中图片资源地址\"><a href=\"#3-每话中图片资源地址\" class=\"headerlink\" title=\"3.每话中图片资源地址\"></a>3.每话中图片资源地址</h3><p>每话都有数量不等的漫画图片，页面识别后找到可以确保唯一性的图片元素定位方法，所有的图片都在标签 ul &gt; li 列表中，所以，我们可以获取图片img列表，然后遍历img列表，逐个下载即可。</p>\n<p>定位img列表的CSS Selector语法是 <code>ul#comicContain li img</code> 。</p>\n<p><img data-src=\"/images/in-post/selenium-lazyload/selenium-lazyload-03.webp\" alt=\"imag\"></p>\n<h2 id=\"失败了……\"><a href=\"#失败了……\" class=\"headerlink\" title=\"失败了……\"></a>失败了……</h2><p>将以上的元素定位写入代码，修改后，先缩小话的for循化范围成从第1话开始到第2话结束，调试运行py。</p>\n<p>有点小确幸，多谢佛祖保佑，脚本运行通过，没有报错。</p>\n<p><img data-src=\"/images/in-post/selenium-lazyload/selenium-lazyload-04.webp\" alt=\"imag\"></p>\n<p>打开本地磁盘，查看保存的图片。<br>糟糕，除了前面几张图，后面全部都是一模一样的小图片，以我的多年工作经验来分析——哎呀妈，这些都是占位图啊！</p>\n<p><img data-src=\"/images/in-post/selenium-lazyload/selenium-lazyload-05.webp\" alt=\"imag\"></p>\n<p>打开网页验证下自己的猜想。</p>\n<p><img data-src=\"/images/in-post/selenium-lazyload/selenium-lazyload-07.webp\" alt=\"imag\"></p>\n<p>确实像猜想的那样，当我没有浏览到处于页面下方的图片时，那里只有占位图，当页面向下滚动快要到达占位图时，img标签的src会被替换成真实的资源url，然后页面才加载图片。</p>\n<h2 id=\"如何处理懒加载页面？\"><a href=\"#如何处理懒加载页面？\" class=\"headerlink\" title=\"如何处理懒加载页面？\"></a>如何处理懒加载页面？</h2><p>那么，问题就显而易见了，这个页面使用了“懒加载（lazy load）”，也叫做“延迟加载”。不过，想想又觉得理所应当，像这样包含大量大图的页面，不延迟加载才是怪事。</p>\n<blockquote>\n<p>惰性载入（英语：Lazy loading、Infinite Scroll，又称延迟载入、懒载入、无限卷动、瀑布流），是一种设计模式，被运用在软体设计和网页设计当中，对于网页界面，其特征为使用者透过滑鼠，卷动浏览页面，直到页面下方时，就会自动载入更多内容；有多数网站采用这项网页设计，例如Google图片搜索、Google+、Facebook、Twitter、Pinterest和维基百科的Flow讨论系统。也有结合无限卷动和多页，两著特性的网页设计。</p>\n<p>– Wikipedia</p>\n</blockquote>\n<p>使用关键字“python 页面抓取 懒加载”在Google搜索一番，又使用相似的英文搜索，结果都指向一种解决方式：<strong>通过Selenium滚动页面触发js加载图片</strong>。</p>\n<p>既然要用Selenium，那么，我还是换回Java来实现这次的需求吧，谁让咱是 Java + Selenium老手呢（见历史文章），转而去整Python + Selenium的话，又要重新学习，我可不想重复造轮子。</p>\n<h1 id=\"Java实现爬虫，第2版\"><a href=\"#Java实现爬虫，第2版\" class=\"headerlink\" title=\"Java实现爬虫，第2版\"></a>Java实现爬虫，第2版</h1><p>很久前，我就已经在github上开源了一个UITest框架，借助Selenium和Appium，地址是 <a href=\"https://github.com/quanqinle/WebAndAppUITesting\">WebAndAppUITesting</a> 。这么小的需求没必要使用这套框架，从工程里借鉴一些代码即可。</p>\n<p>第1版上我需要增加页面滚动的逻辑，按之前的经验需要加入JavaScript执行器的代码，可用的方式大致有以下几种：</p>\n<p><img data-src=\"/images/in-post/selenium-lazyload/selenium-lazyload-08.webp\" alt=\"imag\"></p>\n<p>不多说了，直接上代码吧</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.uitest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.FileAlreadyExistsException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.StandardOpenOption;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openqa.selenium.By;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openqa.selenium.JavascriptExecutor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openqa.selenium.WebDriver;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openqa.selenium.WebElement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openqa.selenium.chrome.ChromeDriver;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openqa.selenium.chrome.ChromeOptions;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下载 海贼王 漫画</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> quanqinle</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadOnePiece</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        download();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">download</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> firstChap  = <span class=\"number\">001</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> newestChap = <span class=\"number\">947</span>;</span><br><span class=\"line\">        String baseUrl = <span class=\"string\">&quot;https://I.cannot.tell.the.real.url/post/10%03d/&quot;</span>;</span><br><span class=\"line\">        String baseDir = <span class=\"string\">&quot;D:\\\\OnePiece\\\\%03d\\\\&quot;</span>;</span><br><span class=\"line\">        String baseFile = <span class=\"string\">&quot;D:\\\\OnePiece\\\\%03d\\\\%03d-%03d.jpg&quot;</span>;</span><br><span class=\"line\">        String chapterName = <span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">// 第2话 戴草帽的路飞</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.setProperty(<span class=\"string\">&quot;webdriver.chrome.driver&quot;</span>, <span class=\"string\">&quot;C:\\\\chromedriver.exe&quot;</span>);</span><br><span class=\"line\">        ChromeOptions options = <span class=\"keyword\">new</span> ChromeOptions();</span><br><span class=\"line\">        options.addArguments(<span class=\"string\">&quot;headless&quot;</span>);</span><br><span class=\"line\">        WebDriver driver = <span class=\"keyword\">new</span> ChromeDriver(options);</span><br><span class=\"line\">        driver.get(<span class=\"string\">&quot;https://I.cannot.tell.you.the.real.url&quot;</span>);</span><br><span class=\"line\">        driver.manage().window().maximize();</span><br><span class=\"line\">        driver.manage().timeouts().implicitlyWait(<span class=\"number\">5</span>, TimeUnit.SECONDS);</span><br><span class=\"line\"></span><br><span class=\"line\">        JavascriptExecutor js = (JavascriptExecutor) driver;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;WebElement&gt; imgList = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idxChap = firstChap; idxChap &lt;= newestChap; idxChap++) &#123;</span><br><span class=\"line\">            driver.get(String.format(baseUrl, idxChap));</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">2</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            chapterName = driver.findElement(By.cssSelector(<span class=\"string\">&quot;span.title-comicHeading&quot;</span>)).getText();</span><br><span class=\"line\">            toLog(String.format(<span class=\"string\">&quot;# [%03d] %s&quot;</span>, idxChap, chapterName));</span><br><span class=\"line\"></span><br><span class=\"line\">            createFolder(String.format(baseDir, idxChap));</span><br><span class=\"line\">            imgList = driver.findElements(By.cssSelector(<span class=\"string\">&quot;ul#comicContain li img&quot;</span>));</span><br><span class=\"line\">            <span class=\"keyword\">int</span> imgIndex = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (WebElement img : imgList) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (img.getAttribute(<span class=\"string\">&quot;id&quot;</span>).contains(<span class=\"string\">&quot;adBottom&quot;</span>) </span><br><span class=\"line\">                        || img.getAttribute(<span class=\"string\">&quot;id&quot;</span>).contains(<span class=\"string\">&quot;adTop&quot;</span>)</span><br><span class=\"line\">                    || img.getAttribute(<span class=\"string\">&quot;src&quot;</span>).contains(<span class=\"string\">&quot;006xpM3Tgy1feta1hkppuj30m8076wgh.jpg&quot;</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 漫画中间竟然穿插了广告图！</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                 * 因为页面是懒加载，需滚动页面</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                js.executeScript(<span class=\"string\">&quot;arguments[0].scrollIntoView();&quot;</span>, img);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                String srcUrl = img.getAttribute(<span class=\"string\">&quot;src&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (srcUrl.contains(<span class=\"string\">&quot;pixel.gif&quot;</span>)) &#123;</span><br><span class=\"line\">                    toLog(String.format(<span class=\"string\">&quot;fail to load img [%03d - %03d]&quot;</span>, idxChap, imgIndex++));</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                String destFile = String.format(baseFile, idxChap, idxChap, imgIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">                toLog(String.format(<span class=\"string\">&quot;下载[%03d]：%s&quot;</span>, imgIndex, srcUrl));</span><br><span class=\"line\">                imgIndex++;</span><br><span class=\"line\">                downloadFile(srcUrl, destFile);</span><br><span class=\"line\">            &#125; <span class=\"comment\">// 图片循环 end</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"comment\">// 页面循环 end</span></span><br><span class=\"line\"></span><br><span class=\"line\">        driver.quit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 下载指定资源到目标文件</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> url</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destFile</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">downloadFile</span><span class=\"params\">(String url, String destFile)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            InputStream in = <span class=\"keyword\">new</span> URL(url).openStream();</span><br><span class=\"line\">            Files.copy(in, Paths.get(destFile));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (FileAlreadyExistsException e) &#123;</span><br><span class=\"line\">            toLog(<span class=\"string\">&quot;文件已存在：&quot;</span> + destFile);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建文件夹</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> folderName 文件夹名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">createFolder</span><span class=\"params\">(String folderName)</span> </span>&#123;</span><br><span class=\"line\">        File dirFile = <span class=\"keyword\">new</span> File(folderName);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> bFile = dirFile.exists();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bFile == <span class=\"keyword\">false</span>) &#123;</span><br><span class=\"line\">            bFile = dirFile.mkdirs();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bFile == <span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            toLog(<span class=\"string\">&quot;Create folder successfully! -- &quot;</span> + folderName);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            toLog(<span class=\"string\">&quot;Create folder error! -- &quot;</span> + folderName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 写日志</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">toLog</span><span class=\"params\">(String newline)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            List&lt;String&gt; lines = Arrays.asList(newline);</span><br><span class=\"line\">            Path file = Paths.get(<span class=\"string\">&quot;D:\\\\onepiece.log&quot;</span>);</span><br><span class=\"line\">            System.out.println(newline);</span><br><span class=\"line\">            Files.write(file, lines, Charset.forName(<span class=\"string\">&quot;UTF-8&quot;</span>), StandardOpenOption.CREATE, StandardOpenOption.APPEND);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，为了效率考虑，实际运行抓取图片时，我使用了“无界面的浏览器”，即代码段 <code>options.addArguments(&quot;headless&quot;);</code> 。</p>\n<p>调试的时候可以注释该行，在有界面的情况下，观察运行效果。</p>\n<p>另外提一句，我当前使用的chrome和driver在headless模式下出现了bug，变量chapterName总是空字符串，而有界面时，没有这个问题。</p>\n<h2 id=\"再次运行代码\"><a href=\"#再次运行代码\" class=\"headerlink\" title=\"再次运行代码\"></a>再次运行代码</h2><p>再次运行代码，这次世界清静了，程序正常运行没报错，图片也正常下载了。只是代码执行比较慢，因为，为了保障页面加载、图片抓取的成功率，加了一些sleep等待。好在使用headless模式运行，把它收起在后台默默执行，也不影响我做别的事情。</p>\n<p>一段时间后……</p>\n<p><img data-src=\"/images/in-post/selenium-lazyload/selenium-lazyload-10.webp\" alt=\"imag\"></p>\n<p>看漫画喽</p>\n","categories":["Code"],"tags":["Selenium","Automated Testing","Web Crawling"]},{"title":"Selenium | 自动登录脚本如何绕过二维码、校验码等安全校验","url":"/2020/06/06/Bypass-login-verification-with-cookies/","content":"<p>做Web UI自动化测试的朋友，基本上都会遇到用户登录操作，然而基于安全性考虑，登录过程除了要求输入用户名和密码，往往还会存在为了防止自动化登陆而设置的更加复杂的校验。比如，<br><img data-src=\"/images/in-post/selenium-login-cookie/01.webp\" alt=\"imag\"></p>\n<p>既然这些校验的存在就是为了对抗robot、防止自动化登陆，那么，它们自然就成了自动化登陆所面临的难题了。如果知道了这一点，你仍去试着用Selenium或其他技术进行破解，那么，在这样做之前，建议你先掂量掂量自己的技术实力吧。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"我们自己项目中的安全校验\"><a href=\"#我们自己项目中的安全校验\" class=\"headerlink\" title=\"我们自己项目中的安全校验\"></a>我们自己项目中的安全校验</h1><p>如果这种校验出现在我们自己的测试项目中，正如我在视频《Web UI自动化测试：Selenium入门》中所说，建议你和研发人员沟通，<strong>在test版本上去除它们，只保留用户和密码即可</strong>。</p>\n<p>解决问题的方法有很多，换一种思路，一切豁然开朗。把“登录过程中二维码/短信验证”<strong>从自动化测试用例集中移出，放到手工测试用例集</strong>，技术难题就这么轻松愉快的解决了，码农再也不用为了苦思冥想、挠头掉发担心了。</p>\n<p>各位看客，山不过来我就过去~~</p>\n<h1 id=\"第三方网站中的安全校验\"><a href=\"#第三方网站中的安全校验\" class=\"headerlink\" title=\"第三方网站中的安全校验\"></a>第三方网站中的安全校验</h1><p>可是……如果你是在对第三方网站编写网页爬虫，或者编写一些自动化脚本，遇到防自动化登录校验，又该怎么办呢？现在可没有网站程序员帮你临时去掉这个功能模块了。</p>\n<p>这种情况，正是本文需要讲解的内容。</p>\n<h1 id=\"半自动化方案\"><a href=\"#半自动化方案\" class=\"headerlink\" title=\"半自动化方案\"></a>半自动化方案</h1><p>我的解决方案是这样的：</p>\n<ol>\n<li>人工登录所需网站。</li>\n<li>提取页面请求头中的Cookie。</li>\n<li>将Cookie添加到WebDriver。</li>\n</ol>\n<p>前两步很简单，应该是从业人员的基本功，不过多赘述，但下文也会演示。重点在第3步，我不确定Selenium是否提供了这样的API，幸运的是，最终在官方docs中找到所需的方法。</p>\n<p>也许你已经发现了，经过这个方案的处理，我们的自动化变得不纯粹了，它变成了半自动化，因为获取请求Cookie的过程是人工的。Anyway，我的自动化脚本至少又可以运行起来了，加入一点点人工介入也是值得的。</p>\n<p>另外一点不方便的是，Cookie中的登录信息都是有有效期的，无论这个网站登录时效使用的是Cookie还是Session，我们不可避免的都需要每隔一段时间重新手工登录网站，获取最新的Cookie，并在我们的代码中进行替换。</p>\n<h1 id=\"演示\"><a href=\"#演示\" class=\"headerlink\" title=\"演示\"></a>演示</h1><p>下面我们以头条公众号后台为例演示整个过程。</p>\n<h2 id=\"1、人工登录所需网站\"><a href=\"#1、人工登录所需网站\" class=\"headerlink\" title=\"1、人工登录所需网站\"></a>1、人工登录所需网站</h2><p>这一步就不演示了，可别泄露了我的密码。<br><img data-src=\"/images/in-post/selenium-login-cookie/02.webp\" alt=\"imag\"></p>\n<h2 id=\"2、提取页面请求头中的Cookie\"><a href=\"#2、提取页面请求头中的Cookie\" class=\"headerlink\" title=\"2、提取页面请求头中的Cookie\"></a>2、提取页面请求头中的Cookie</h2><p>操作步骤：</p>\n<ol>\n<li>点击<kbd>F12</kbd>，打开“开发者工具”</li>\n<li>刷新页面，捕获请求</li>\n<li>在左侧请求列表中切换几次，找到<code>Request Headers</code>中<code>Cookie</code>有值的请求</li>\n<li>Cookie字段后面的一长串字符串，就是我们需要的<br><img data-src=\"/images/in-post/selenium-login-cookie/03.webp\" alt=\"imag\"></li>\n</ol>\n<h2 id=\"3、将Cookie添加到WebDriver\"><a href=\"#3、将Cookie添加到WebDriver\" class=\"headerlink\" title=\"3、将Cookie添加到WebDriver\"></a>3、将Cookie添加到WebDriver</h2><p>上一步中得到的Cookie字符串还需要经过处理，因为它是很多Cookie以分号为分隔符拼接之后的内容，我们需要逆向操作：</p>\n<ol>\n<li>先以“分号<code>;</code>”为分隔符获取Cookie列表，</li>\n<li>列表中的元素都含有=号，=左侧是Cookie的name，=右侧是Cookie的value，用name和value构造Cookie，</li>\n<li>最后传给WebDriver。</li>\n</ol>\n<p>为了验证我们分析的 <strong>“Cookie字符串是以分号分隔、Cookie的name和value在=两侧”</strong>，我们仍回到“开发者工具”，切换到Cookies卡片下，查看Cookie列表完整信息：</p>\n<p><img data-src=\"/images/in-post/selenium-login-cookie/04.webp\" alt=\"imag\"></p>\n<h1 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h1><p>闲话少叙，我们开始编码吧。</p>\n<p>先解析我们得到的原始Cookie字符串，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.openqa.selenium.Cookie;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将cookie字符串拆解到list中</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> rawCookie 原始Cookie字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> Cookie列表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Cookie&gt; <span class=\"title\">parseRawCookie</span><span class=\"params\">(String rawCookie)</span> </span>&#123;</span><br><span class=\"line\">  List&lt;Cookie&gt; cookies = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  String[] rawCookieParams = rawCookie.split(<span class=\"string\">&quot;;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (String cookieParam : rawCookieParams) &#123;</span><br><span class=\"line\">    String[] rawCookieNameAndValue = cookieParam.split(<span class=\"string\">&quot;=&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">2</span> != rawCookieNameAndValue.length) &#123;</span><br><span class=\"line\">      log.error(<span class=\"string\">&quot;Invalid cookie: missing name and value.&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String cookieName = rawCookieNameAndValue[<span class=\"number\">0</span>].trim();</span><br><span class=\"line\">    String cookieValue = rawCookieNameAndValue[<span class=\"number\">1</span>].trim();</span><br><span class=\"line\">    Cookie cookie = <span class=\"keyword\">new</span> Cookie(cookieName, cookieValue);</span><br><span class=\"line\">    cookies.add(cookie);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cookies;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将上一步得到的Cookie列表添加给WebDriver，这一步需要放在所有需要权限验证的步骤之前。<br>我们可以先添加Cookie，然后刷新页面，这样我们打开的网页就是登陆状态了。<br><img data-src=\"/images/in-post/selenium-login-cookie/06.webp\" alt=\"imag\"></p>\n<p>编码演示到这里就够用了，大家不妨试试。</p>\n<h1 id=\"API补充说明\"><a href=\"#API补充说明\" class=\"headerlink\" title=\"API补充说明\"></a>API补充说明</h1><p>在这个解决方案中，我们主要用到了两个接口，它们还有一些相关接口，如有需要，请自行查阅。</p>\n<h2 id=\"1、添加Cookie\"><a href=\"#1、添加Cookie\" class=\"headerlink\" title=\"1、添加Cookie\"></a>1、添加Cookie</h2><p><code>void addCookie(Cookie cookie) // Add a specific cookie.</code></p>\n<ul>\n<li>所属接口：<br><code>org.openqa.selenium.WebDriver.Options</code></li>\n<li>相关方法：<br><code>java.util.Set&lt;Cookie&gt; getCookies()</code>、<code>deleteCookie(Cookie cookie)</code> 等等。</li>\n</ul>\n<h2 id=\"2、构造Cookie\"><a href=\"#2、构造Cookie\" class=\"headerlink\" title=\"2、构造Cookie\"></a>2、构造Cookie</h2><p><code>Cookie(java.lang.String name, java.lang.String value)</code></p>\n<ul>\n<li>所属接口：<br><code>org.openqa.selenium.Cookie</code></li>\n<li>相关方法：<br><code>Cookie(java.lang.String name, java.lang.String value, java.lang.String domain, java.lang.String path, java.util.Date expiry, boolean isSecure, boolean isHttpOnly)</code> 等等</li>\n</ul>\n<p>官方docs地址，如下：<br><a href=\"https://seleniumhq.github.io/selenium/docs/api/java/\">https://seleniumhq.github.io/selenium/docs/api/java/</a></p>\n","categories":["Code"],"tags":["Selenium","Automated Testing","Interface Testing","API Testing"]},{"title":"在porkbun注册域名","url":"/2020/06/10/register-domain/","content":"<h1 id=\"选择域名服务商\"><a href=\"#选择域名服务商\" class=\"headerlink\" title=\"选择域名服务商\"></a>选择域名服务商</h1><ul>\n<li>开始时，考虑了<code>namecheap</code>、<code>namesilo</code>、<code>godaddy</code></li>\n<li>网上搜索比较后，优先<code>namesilo</code></li>\n<li>最终通过比价，选择<code>porkbun</code>。对于初级、低端域名玩家，<em>便宜</em>就是吸引力。</li>\n</ul>\n<blockquote>\n<p>域名服务商价格比较工具：<a href=\"https://www.domcomp.com/\">www.domcomp.com</a></p>\n</blockquote>\n<p>另外，到期后，我考虑转到<code>namesilo</code>。</p>\n<h1 id=\"在porkbun注册域名\"><a href=\"#在porkbun注册域名\" class=\"headerlink\" title=\"在porkbun注册域名\"></a>在<code>porkbun</code>注册域名</h1><p><a href=\"https://porkbun.com/\">porkbun</a>的特点：</p>\n<ol>\n<li>便宜</li>\n<li>Free WHOIS Privacy：免费的Whois隐私保护</li>\n<li>Free SSL Certificates：免费的SSL</li>\n</ol>\n<p>操作过程简单，不再赘述。</p>\n<h1 id=\"增改DNS-RECORDS\"><a href=\"#增改DNS-RECORDS\" class=\"headerlink\" title=\"增改DNS RECORDS\"></a>增改<code>DNS RECORDS</code></h1><p>点击<code>DNS RECORDS</code>，可以看到默认已经提供了一些记录，它们都指向<code>porkbun</code>的默认网址。</p>\n<p>因为我暂时只搭了博客，所以，添加一条DNS记录指向博客，其他的暂时保持原样。</p>\n<ul>\n<li>添加<code>CNAME类型</code>的记录</li>\n<li><code>Host</code>填写blog，这个域名已在git中配置</li>\n<li><code>Answer</code>填写我的github.io地址</li>\n</ul>\n<blockquote>\n<p>【Tip】网址DNS记录最常用的类型是CNAME与ALIAS，简单说明二者的区别：</p>\n<ul>\n<li>CNAME：解析到其他域名</li>\n<li>ALIAS：解析到ip</li>\n</ul>\n</blockquote>\n<p>至此，域名注册和绑定已经完成，可以正常使用了。</p>\n<p>如果想使用CDN，需要继续下面的步骤。</p>\n<h1 id=\"把nameservers转移到cloudflare\"><a href=\"#把nameservers转移到cloudflare\" class=\"headerlink\" title=\"把nameservers转移到cloudflare\"></a>把nameservers转移到<code>cloudflare</code></h1><p>先看<a href=\"https://kb.porkbun.com/article/22-how-to-change-your-nameservers\">porkbun官方操作指引</a></p>\n<blockquote>\n<p>tip: <a href=\"https://dash.cloudflare.com/\">cloudflare</a>提供免费的CDN服务</p>\n</blockquote>\n<ol>\n<li><p>登陆<code>cloudflare</code>，添加自己的域名</p>\n</li>\n<li><p><code>cloudflare</code>将自动扫描 DNS 记录</p>\n<ul>\n<li><strong>黄色云朵</strong>表示该解析通过 CDN 访问（隐藏网站真实 IP 地址，保护原站安全。）</li>\n<li><strong>灰色云朵</strong>表示不通过 CDN 访问（相当于只使用 cloudflare 的 DNS 功能）</li>\n<li>点击云朵可以切换状态。</li>\n<li>手工添加缺失的记录</li>\n</ul>\n</li>\n<li><p>在原域名供应商<code>porkbun</code>处，点击<code>AUTHORITATIVE NAMESERVERS</code>并修改</p>\n</li>\n</ol>\n<p>删除以下所有</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">curitiba.porkbun.com</span><br><span class=\"line\">fortaleza.porkbun.com</span><br><span class=\"line\">maceio.porkbun.com</span><br><span class=\"line\">salvador.porkbun.com</span><br></pre></td></tr></table></figure>\n\n<p>替换为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">dalary.ns.cloudflare.com</span><br><span class=\"line\">rohin.ns.cloudflare.com</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>剩下就是等待<code>cloudflare</code>变成激活状态：<code>Status: Activity</code></li>\n</ol>\n","tags":["Domain","DNS","CDN"]},{"title":"Junit | 在Spring Boot2低版本中使用Junit 5","url":"/2020/06/11/use-junit5-in-lower-version-of-springboot/","content":"<p>先说结论：如果你用的<code>Spring Boot</code>版本是<code>2.2.0</code>或更新，那么，<code>spring-boot-starter-test</code>已自带<code>Junit 5</code>，本文对你无用，你可以直接在你的工程中编码了。</p>\n<p>下文是<code>Spring Boot 2</code>版本低于<code>2.2.0.RELEASE</code>时的配置方法。</p>\n<span id=\"more\"></span>\n\n<p>我的环境：</p>\n<ul>\n<li>Java 8+</li>\n<li>Maven 3</li>\n<li>Spring Boot 2.0.7.RELEASE</li>\n<li>想使用Junit 5，且没有Junit 4的历史用例</li>\n</ul>\n<p>配置步骤不复杂，简单来说，从<code>spring-boot-starter-test</code>中去掉<code>Junit 4</code>，再引入<code>Junit 5</code>。<br>pom.xml需要修改的部分如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- Junit updates to version 5 since springboot 2.2--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.jupiter<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-jupiter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.6.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- unit test: Need at least 2.22.0 to support JUnit 5 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-surefire-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.22.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Tip：<code>junit-jupiter</code>已包含<code>junit-jupiter-engine</code>、<code>junit-jupiter-api</code>、<code>junit-jupiter-params</code>，所以，只引入它就够了。</p>\n","categories":["Code"],"tags":["Junit","Spring Boot","Unit Testing"]},{"title":"我对自动化测试的基本观点","url":"/2020/06/14/my-basic-views-on-unite-testing/","content":"<h1 id=\"什么是自动化测试？\"><a href=\"#什么是自动化测试？\" class=\"headerlink\" title=\"什么是自动化测试？\"></a>什么是自动化测试？</h1><p>不想说话</p>\n<h1 id=\"为什么要进行自动化测试？自动化测试的好处\"><a href=\"#为什么要进行自动化测试？自动化测试的好处\" class=\"headerlink\" title=\"为什么要进行自动化测试？自动化测试的好处\"></a>为什么要进行自动化测试？自动化测试的好处</h1><p>不想说话</p>\n<h1 id=\"自动化测试的类型\"><a href=\"#自动化测试的类型\" class=\"headerlink\" title=\"自动化测试的类型\"></a>自动化测试的类型</h1><h2 id=\"常规分类\"><a href=\"#常规分类\" class=\"headerlink\" title=\"常规分类\"></a>常规分类</h2><p>通常我们听到最多的分类方式是：</p>\n<ul>\n<li>单元测试 unit testing</li>\n<li>接口测试 API testing</li>\n<li>界面测试 user interface testing</li>\n</ul>\n<p>这个分类法很合理，也容易理解，唯一的问题是在实际实施的时候，所写的有些用例很难区分是单元测试还是接口测试。</p>\n<h2 id=\"按大小分类\"><a href=\"#按大小分类\" class=\"headerlink\" title=\"按大小分类\"></a>按大小分类</h2><p>下面是 <a href=\"https://cloud.tencent.com/developer/article/1490961\">腾讯新闻产品组提出的分类方式</a>，我认为具有很好的可操作性：</p>\n<ul>\n<li>小型测试，针对单个函数的测试，关注其内部逻辑，mock所有需要的服务。小型测试带来优秀的代码质量、良好的异常处理、优雅的错误报告</li>\n<li>中型测试，验证两个或多个制定的模块应用之间的交互</li>\n<li>大型测试，也被称为“系统测试”或“端到端测试”。大型测试在一个较高层次上运行，验证系统作为一个整体是如何工作的。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>资源</th>\n<th>小型测试</th>\n<th>中型测试</th>\n<th>大型测试</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>网络访问</td>\n<td>否</td>\n<td>仅访问localhost</td>\n<td>是</td>\n</tr>\n<tr>\n<td>数据库访问</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>访问文件</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>访问用户界面</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td>使用外部服务</td>\n<td>否</td>\n<td>不鼓励，可mock</td>\n<td>是</td>\n</tr>\n<tr>\n<td>多线程</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>使用sleep语句</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>使用系统属性设置</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>运行时间限制（毫秒）</td>\n<td>60</td>\n<td>300</td>\n<td>900+</td>\n</tr>\n<tr>\n<td>强制时间限制（分钟）</td>\n<td>1</td>\n<td>5</td>\n<td>15</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>-</th>\n<th>小型测试</th>\n<th>中型测试</th>\n<th>大型测试</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>对应测试类型</td>\n<td>单元测试</td>\n<td>单元测试+逻辑层测试（泛单元或分层测试）</td>\n<td>UI测试或接口测试</td>\n</tr>\n</tbody></table>\n<h1 id=\"我的做法\"><a href=\"#我的做法\" class=\"headerlink\" title=\"我的做法\"></a>我的做法</h1><ul>\n<li>遵守“金字塔”理论，UI层用例做薄，UT用例做厚</li>\n<li>MVC后端项目分层测试，每层的用例对其下层调用时尽量打桩，即，mock它的下层、mock它所调用的函数，达到隔离所测类、实现只测当前类方法的目的</li>\n<li>单元测试尽量不依赖数据库、外部服务、网络等等</li>\n<li>以上3条只是尽量做到，视实际情况允许存在特例</li>\n</ul>\n","tags":["Automated Testing"]},{"title":"Selenium | 元素定位By.cssSelector()","url":"/2020/06/29/CSS-Selector-summary/","content":"<p>[toc]</p>\n<p>CSS Selector 使用CSS定位元素</p>\n<h1 id=\"CSS-Selector是什么？\"><a href=\"#CSS-Selector是什么？\" class=\"headerlink\" title=\"CSS Selector是什么？\"></a><code>CSS Selector</code>是什么？</h1><blockquote>\n<p>[MDN web docs]</p>\n<p>CSS selectors define the elements to which a set of CSS rules apply.</p>\n</blockquote>\n<blockquote>\n<p>[w3schools]</p>\n<p>In CSS, selectors are patterns used to select the element(s) you want to style.</p>\n</blockquote>\n<h1 id=\"CSS-Selector语法\"><a href=\"#CSS-Selector语法\" class=\"headerlink\" title=\"CSS Selector语法\"></a>CSS Selector语法</h1><h2 id=\"4个基础选择器\"><a href=\"#4个基础选择器\" class=\"headerlink\" title=\"4个基础选择器\"></a>4个基础选择器</h2><p>个人认为，<code>CSS Selector</code>最重要的选择器只有下面4个，分别是 tagname标签名称，标签id属性，class属性，以及其他属性：</p>\n<ul>\n<li>tag</li>\n<li>#id</li>\n<li>.class</li>\n<li>[attribute=value]</li>\n</ul>\n<p>这4个的各种组合，可以出现丰富、强大的效果。</p>\n<p>举几个例子</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">tag<span class=\"selector-id\">#id</span></span><br><span class=\"line\">tag<span class=\"selector-class\">.class</span></span><br><span class=\"line\">tag<span class=\"selector-class\">.class1</span><span class=\"selector-class\">.class2</span>   // 多个class</span><br><span class=\"line\">tag<span class=\"selector-attr\">[attributeName=<span class=\"string\">&#x27;attributeValue&#x27;</span>]</span></span><br><span class=\"line\">tag<span class=\"selector-attr\">[attributeName=<span class=\"string\">&#x27;attributeValue&#x27;</span>]</span><span class=\"selector-attr\">[attributeName2=<span class=\"string\">&#x27;attributeValue2&#x27;</span>]</span> // 多个属性</span><br><span class=\"line\">tag<span class=\"selector-id\">#id</span><span class=\"selector-class\">.class</span><span class=\"selector-attr\">[attributeName=<span class=\"string\">&#x27;attributeValue&#x27;</span>]</span> // <span class=\"number\">4</span>个选择器</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多选择器\"><a href=\"#更多选择器\" class=\"headerlink\" title=\"更多选择器\"></a>更多选择器</h2><p>下面再列几个我常用的选择器。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*-- 属性的模糊匹配 --*/</span></span><br><span class=\"line\">// ^ - Starts with</span><br><span class=\"line\"><span class=\"selector-attr\">[attribute^=<span class=\"string\">&#x27;attributeValue&#x27;</span>]</span></span><br><span class=\"line\">// $ - Ends with</span><br><span class=\"line\"><span class=\"selector-attr\">[attribute$=<span class=\"string\">&#x27;attributeValue&#x27;</span>]</span></span><br><span class=\"line\">// * - Contains</span><br><span class=\"line\"><span class=\"selector-attr\">[attribute*=<span class=\"string\">&#x27;attributeValue&#x27;</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*-- 父子节点 --*/</span></span><br><span class=\"line\">// 直接子节点，多个（parentLocator&gt;childLocator）。XPath: //div/a</span><br><span class=\"line\">div#buttonDiv&gt;button</span><br><span class=\"line\">// 相对子节点，多个（locator1 locator2）。XPath: //div//a</span><br><span class=\"line\">div#buttonDiv button</span><br><span class=\"line\">// 同一父节点下的第n个子元素，从<span class=\"number\">1</span>开始（:<span class=\"built_in\">nth-child</span>(n)）。下例，若li不是其父的第<span class=\"number\">2</span>位节点，则失败；数位子时，所有类型一起数</span><br><span class=\"line\">#testingTypes li:<span class=\"built_in\">nth-child</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">/*-- 兄弟节点 --*/</span><br><span class=\"line\">// 紧邻的下一个节点，<span class=\"number\">1</span>个（locator1+locator2）</span><br><span class=\"line\">li#automation + li</span><br><span class=\"line\">// 其后的兄弟节点，可以被其他兄弟隔断（element1~element2）</span><br><span class=\"line\">p~ul</span><br></pre></td></tr></table></figure>\n\n<p>CSS Selector还有其他复杂的语法，但上面我们讲到的已经是精华，实用性最强。</p>\n<p>更多的见资料 [^1]</p>\n<h1 id=\"Selenium中的CSS-Selector\"><a href=\"#Selenium中的CSS-Selector\" class=\"headerlink\" title=\"Selenium中的CSS Selector\"></a><code>Selenium</code>中的<code>CSS Selector</code></h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">By by &#x3D; By.cssSelector(String selector);</span><br><span class=\"line\">&#x2F;&#x2F;Find elements via the driver&#39;s underlying W3C Selector engine.</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">By.cssSelector(<span class=\"string\">&quot;button[id=&#x27;stop&#x27;]&quot;</span>)  </span><br><span class=\"line\">By.cssSelector(<span class=\"string\">&quot;button#stop&quot;</span>)  </span><br><span class=\"line\">By.cssSelector(<span class=\"string\">&quot;#stop&quot;</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\">By.cssSelector(<span class=\"string\">&quot;button.x-right-button&quot;</span>)   </span><br><span class=\"line\">By.cssSelector(<span class=\"string\">&quot;.x-right-button&quot;</span>) </span><br><span class=\"line\"><span class=\"comment\">// &lt;button class=&quot;x-btn-text module_picker_icon&quot; /&gt; </span></span><br><span class=\"line\">By.cssSelector(<span class=\"string\">&quot;button.x-btn-text.module_picker_icon&quot;</span>)  <span class=\"comment\">// 多个class</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//^=start with $=ends with *=contains</span></span><br><span class=\"line\">By.cssSelector(<span class=\"string\">&quot;input[id^=&#x27;Em&#x27;]&quot;</span>)</span><br><span class=\"line\">By.cssSelector(<span class=\"string\">&quot;input[id$=&#x27;wd&#x27;]&quot;</span>)</span><br><span class=\"line\">By.cssSelector(<span class=\"string\">&quot;input[id*=&#x27;ni&#x27;]&quot;</span>) <span class=\"comment\">// 使用a[href*=&#x27;.jpg&#x27;]成功！</span></span><br><span class=\"line\">By.cssSelector(<span class=\"string\">&quot;a:contains(&#x27;Sign in&#x27;)&quot;</span>) </span><br><span class=\"line\"><span class=\"comment\">//contains试用失败！原因见下文invalid selector: An invalid or illegal selector was specified</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">By.cssSelector(<span class=\"string\">&quot;a[title=\\&quot;Go to Facebook home\\&quot;]&quot;</span>)</span><br><span class=\"line\">By.cssSelector(<span class=\"string\">&quot;input[id=&#x27;signIn&#x27;][value=&#x27;Sign in&#x27;]&quot;</span>) <span class=\"comment\">// 多个属性</span></span><br><span class=\"line\">By.cssSelector(<span class=\"string\">&quot;div#west-panel&gt;div:nth-child(1)&gt;div:nth-child(1)&gt;div:nth-child(2)&gt;div&quot;</span>) </span><br><span class=\"line\">By.cssSelector(<span class=\"string\">&quot;td.col5&gt;div&gt;input:nth-child(4)&quot;</span>) <span class=\"comment\">// nth-child(4) 表示查找第四个Pseudo-selements元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// XPATH: //input[@id=&#x27;username&#x27;]/following-sibling::input[1]</span></span><br><span class=\"line\">By.cssSelector(<span class=\"string\">&quot;.username + input&quot;</span>) </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"不能通过文本contains定位元素的问题\"><a href=\"#不能通过文本contains定位元素的问题\" class=\"headerlink\" title=\"不能通过文本contains定位元素的问题\"></a>不能通过文本<code>contains</code>定位元素的问题</h1><p>有一点需要特别注意，不能使用 <code>a:contains(&#39;Sign in&#39;)</code>。</p>\n<p>原因：</p>\n<ol>\n<li><strong>Inner texts</strong><br>are the actual string patterns that the HTML label shows on the page.  </li>\n<li>(Not supported by WebDriver)<br>CSS: The CSS2 contains() function is not in CSS3; however, Selenium supports the superset of CSS1, 2, and 3.<br>contains() is not part of the current CSS3 specification so it will not work on all browsers, only ones that implemented it before it was pulled.</li>\n</ol>\n<p>遇到此种场景，可以使用<code>By by = By.ByXPath(String xpathExpression)</code>。<br>xpath见资料 [^2]</p>\n<h1 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h1><p>[^1]: CSS Selector详解：<a href=\"https://www.w3schools.com/cssref/css_selectors.asp\">https://www.w3schools.com/cssref/css_selectors.asp</a></p>\n<p>[^2]: CSS Selector与xpath语法比较：<a href=\"https://saucelabs.com/resources/articles/selenium-tips-css-selectors\">https://saucelabs.com/resources/articles/selenium-tips-css-selectors</a></p>\n","tags":["Selenium","Automated Testing","CSS Selector"]},{"title":"UT | Controller层单元测试","url":"/2020/06/30/UT-Springboot-test-the-web-layer/","content":"<p>我的环境：</p>\n<ul>\n<li>Java 8+</li>\n<li>Maven 3</li>\n<li>Spring Boot 2</li>\n<li>Junit 5</li>\n</ul>\n<p>Controller的单元测试很多时候都不容易做到隔离，不得不依赖下层类的逻辑、数据库、网络、第三方服务等等，所以，有时人们又将它归为接口测试，类似于HTTP API测试。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"测试的几种类型\"><a href=\"#测试的几种类型\" class=\"headerlink\" title=\"测试的几种类型\"></a>测试的几种类型</h1><p>注意下面示例代码在类注释处的区别！</p>\n<h2 id=\"1-启动服务，监听端口，发送真实的http请求\"><a href=\"#1-启动服务，监听端口，发送真实的http请求\" class=\"headerlink\" title=\"1. 启动服务，监听端口，发送真实的http请求\"></a>1. 启动服务，监听端口，发送真实的http请求</h2><p>Start the application up and listen for a connection like it would do in production, and then send an HTTP request and assert the response.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.web.client.TestRestTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@RunWith</span>(SpringRunner.class) // needed if junit 4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ExtendWith</span>(SpringExtension.class) // for junit 5</span></span><br><span class=\"line\"><span class=\"comment\"> * 正常情况下可省略，因<span class=\"doctag\">@SpringBootTest</span>已包含，但是，如果你用的spring boot版本低，还是加上这个注解吧</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpRequestTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@LocalServerPort</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> port; <span class=\"comment\">// bind the above RANDOM_PORT</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> TestRestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testGreeting</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    assertThat(restTemplate.getForObject(<span class=\"string\">&quot;http://localhost:&quot;</span> + port + <span class=\"string\">&quot;/&quot;</span>, String.class))</span><br><span class=\"line\">      .contains(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-不启动服务（但实例化整个上下文），却类似发送真实http请求\"><a href=\"#2-不启动服务（但实例化整个上下文），却类似发送真实http请求\" class=\"headerlink\" title=\"2. 不启动服务（但实例化整个上下文），却类似发送真实http请求\"></a>2. 不启动服务（但实例化整个上下文），却类似发送真实http请求</h2><p>The full Spring application context is started but without the server.</p>\n<p>Another useful approach is to not start the server at all, but test only the layer below that, where Spring handles the incoming HTTP request and hands it off to your controller. That way, almost the full stack is used, and your code will be called exactly the same way as if it was processing a real HTTP request, but without the cost of starting the server.</p>\n<blockquote>\n<p>译：另一种有用的方法是根本不启动服务器，而是只测试下面的层，Spring在这一层处理传入的HTTP请求并将其传递给控制器。这样，几乎使用了整个堆栈，代码调用的方式与处理实际HTTP请求的方式完全相同，但是不需要启动服务器。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureMockMvc</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MockMvcExampleTests</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> MockMvc mvc;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testHelloWorld</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    mvc.perform(get(<span class=\"string\">&quot;/&quot;</span>))</span><br><span class=\"line\">      .andExpect(status().isOk())</span><br><span class=\"line\">      .andExpect(content().string(<span class=\"string\">&quot;Hello World&quot;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上两种方法会实例化整个上下文。（Spring Boot is instantiating the whole context.）</p>\n<p>可以将<code>@SpringBootTest</code>理解成集成测试。</p>\n<hr>\n<p><em>注意上下两段代码，在类注释处的区别</em>  </p>\n<p>方法3只实例化web层。<br>Spring Boot is only instantiating the web layer.（If you want to focus <strong><span style=\"color:red\"><em>only</em></span> on the web layer</strong> and <strong><span style=\"color:red\"><em>not start</em></span> a complete ApplicationContext</strong>, consider using <code>@WebMvcTest</code> instead.）</p>\n<h2 id=\"3-不启动服务（仅实例化web层），却类似发送真实http请求\"><a href=\"#3-不启动服务（仅实例化web层），却类似发送真实http请求\" class=\"headerlink\" title=\"3. 不启动服务（仅实例化web层），却类似发送真实http请求\"></a>3. 不启动服务（仅实例化web层），却类似发送真实http请求</h2><p>In this test, the full Spring application context is started, but without the server. We can narrow down the tests to just the web layer by using <code>@WebMvcTest</code>.  </p>\n<blockquote>\n<p>译：在这个测试中，启动了完整的Spring应用程序上下文，但是没有服务器。我们可以使用<code>@WebMvcTest</code>将测试范围缩小到web层。<br>如果应用含有多个controller，可以使用<code>@WebMvcTest(homecontroler.class)</code>来只实例化一个控制器。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebMvcTest(GreetingController.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMockTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> MockMvc mockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@MockBean</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> GreetingService service;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testGreetingShouldReturnMessageFromService</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    when(service.greet()).thenReturn(<span class=\"string\">&quot;Hello Mock&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    mockMvc.perform(get(<span class=\"string\">&quot;/greeting&quot;</span>))</span><br><span class=\"line\">      .accept(MediaType.APPLICATION_JSON_UTF8)</span><br><span class=\"line\">      <span class=\"comment\">// 添加ResultHandler结果处理器，比如调试时打印结果到控制台，更多处理器可查阅</span></span><br><span class=\"line\">      .andDo(print())</span><br><span class=\"line\">      <span class=\"comment\">// 添加ResultMatcher验证规则，验证请求结果是否正确</span></span><br><span class=\"line\">      .andExpect(status().isOk())</span><br><span class=\"line\">      <span class=\"comment\">// andReturn：返回执行请求的结果，该结果是一个MvcResult实例对象</span></span><br><span class=\"line\">      .andExpect(content().string(containsString(<span class=\"string\">&quot;Hello Mock&quot;</span>)));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Mock下层所有调用\"><a href=\"#4-Mock下层所有调用\" class=\"headerlink\" title=\"4. Mock下层所有调用\"></a>4. Mock下层所有调用</h2><p>只关注<code>Controller</code>层逻辑，被测中所涉及的调用全部打桩、mock掉。</p>\n<p>与其他三个相比，方法4是比较合乎分层测试理念的方式。但在实际项目中，个人的体会，这种方式可操作性并不强。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MockitoControllerTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@InjectMocks</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> UserController userController;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Mock</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> UserRepository userRepository;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@BeforeEach</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    MockitoAnnotations.initMocks(<span class=\"keyword\">this</span>); <span class=\"comment\">//【必须！】初始化@Mock</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testGetUserById</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    User u = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    u.setId(<span class=\"number\">1L</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    when(userRepository.findOne(<span class=\"number\">1L</span>)).thenReturn(u);</span><br><span class=\"line\"></span><br><span class=\"line\">    User user = userController.get(<span class=\"number\">1L</span>);</span><br><span class=\"line\">    verify(userRepository).findOne(<span class=\"number\">1L</span>);</span><br><span class=\"line\">    assertEquals(<span class=\"number\">1l</span>, user.getId().longValue());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"重要注解\"><a href=\"#重要注解\" class=\"headerlink\" title=\"重要注解\"></a>重要注解</h1><h2 id=\"SpringBootTest\"><a href=\"#SpringBootTest\" class=\"headerlink\" title=\"@SpringBootTest\"></a><code>@SpringBootTest</code></h2><p>The <code>@SpringBootTest</code> annotation tells Spring Boot to go and look for a main configuration class (one with <code>@SpringBootApplication</code> for instance), and use that to <strong>start a Spring application context</strong>.</p>\n<p>注释告诉SpringBoot去寻找一个主配置类（例如带有<code>@SpringBootApplication</code>的配置类），并使用它来启动一个Spring应用程序上下文。</p>\n<blockquote>\n<p>Springboot默认只启动一次应用，并缓存它。对于使用配置相同的多个tc，或者一个tc中的多个method，就可以共用它。当然，可以使用<code>@DirtiesContext</code>来控制缓存。</p>\n</blockquote>\n<p>它有两个属性：</p>\n<ul>\n<li>webEnvironment：指定Web应用环境，它可以是以下值<ul>\n<li>MOCK：提供一个模拟的 Servlet 环境，内置的 Servlet 容器没有启动（不会对Servlet、Filter、Listener等进行初始化），配合可以与@AutoConfigureMockMvc 结合使用，用于基于 MockMvc 的应用程序测试。</li>\n<li>RANDOM_PORT：加载一个 EmbeddedWebApplicationContext 并提供一个真正嵌入式的 Servlet 环境，随机端口。</li>\n<li>DEFINED_PORT：加载一个 EmbeddedWebApplicationContext 并提供一个真正嵌入式的 Servlet 环境，默认端口 8080 或由配置文件指定。</li>\n<li>NONE：使用 SpringApplication 加载 ApplicationContext，但不提供任何 servlet 环境。</li>\n</ul>\n</li>\n<li>classes：指定应用启动类，通常情况下无需设置，因为 SpringBoot 会自动搜索，直到找到 @SpringBootApplication 或 @SpringBootConfiguration 注解。</li>\n</ul>\n<h2 id=\"Transactional\"><a href=\"#Transactional\" class=\"headerlink\" title=\"@Transactional\"></a><code>@Transactional</code></h2><p>它会在每个测试方法结束时会进行回滚操作。<br>但是，如果使用 <code>RANDOM_PORT</code> 或 <code>DEFINED_PORT</code> 这样的Servlet环境，HTTP客户端和服务器将在不同的线程中运行，从而分离事务。所以，在这种情况下，在服务器上启动的任何事务都不会回滚。</p>\n<h1 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h1><p><a href=\"https://spring.io/guides/gs/testing-web/\">Offical &gt; Testing the Web Layer</a></p>\n","tags":["Automated Testing","Junit","Spring Boot","Unit Testing"]},{"title":"小米6刷机","url":"/2020/07/04/Xiaomi-install-custom-ROM/","content":"<p>[toc]</p>\n<h1 id=\"刷官方ROM\"><a href=\"#刷官方ROM\" class=\"headerlink\" title=\"刷官方ROM\"></a>刷官方ROM</h1><h2 id=\"下载官方ROM\"><a href=\"#下载官方ROM\" class=\"headerlink\" title=\"下载官方ROM\"></a>下载官方ROM</h2><ul>\n<li>下载所需官方版ROM</li>\n<li>复制到手机存储，路径任意，根目录即可</li>\n</ul>\n<h2 id=\"开启隐藏功能【手动选择安装包】\"><a href=\"#开启隐藏功能【手动选择安装包】\" class=\"headerlink\" title=\"开启隐藏功能【手动选择安装包】\"></a>开启隐藏功能【手动选择安装包】</h2><ul>\n<li>MIUI版本 界面，连续点击中间“11”图标</li>\n<li>点击右上角【…】，手动选择安装包、重启到Recovery出现</li>\n</ul>\n<h1 id=\"刷第三方ROM\"><a href=\"#刷第三方ROM\" class=\"headerlink\" title=\"刷第三方ROM\"></a>刷第三方ROM</h1><p>第三方ROM，例如，<a href=\"https://forum.xda-developers.com/mi-6/development/rom-evolution-x-4-20-2-sagit-t4089445\">xda</a> 或 <a href=\"https://xiaomi.eu/community/threads/miui-11-0-stable-release.52628/\">eu</a></p>\n<h2 id=\"1-开启USB调试\"><a href=\"#1-开启USB调试\" class=\"headerlink\" title=\"1. 开启USB调试\"></a>1. 开启<code>USB调试</code></h2><p>开启<code>开发者模式</code>：我的设备 → 全部参数 → MIUI版本 连续点击7次</p>\n<p>开启<code>USB调试</code>：更多设置 → 开发人员选项 → USB调试模式。</p>\n<p>手机USB插到电脑上。</p>\n<h2 id=\"2-解锁BL（Bootloader）\"><a href=\"#2-解锁BL（Bootloader）\" class=\"headerlink\" title=\"2. 解锁BL（Bootloader）\"></a>2. 解锁BL（Bootloader）</h2><p><a href=\"http://www.miui.com/unlock/download.html\">http://www.miui.com/unlock/download.html</a></p>\n<h2 id=\"3-安装TWRP\"><a href=\"#3-安装TWRP\" class=\"headerlink\" title=\"3. 安装TWRP\"></a>3. 安装TWRP</h2><blockquote>\n<p>What is TWRP? TWRP is a Custom Recovery.</p>\n<p>存在多种操作方式，其中，手机上安装app的方式需要root手机，所以，改用命令行<code>adb+fastboot</code>的方式</p>\n</blockquote>\n<ul>\n<li>进入Fastboot</li>\n</ul>\n<p><code>adb reboot bootloader</code><br>如果未按预期进入Fastboot，则，先手动关机，再长按 <code>音量下</code>+<code>电源</code> 开机</p>\n<ul>\n<li>下载合适的 <code>twrp.img</code></li>\n</ul>\n<p><a href=\"https://twrp.me/xiaomi/xiaomimi6.html\">https://twrp.me/xiaomi/xiaomimi6.html</a></p>\n<ul>\n<li><p>刷twrp.img</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">fastboot flash recovery twrp.img</span><br></pre></td></tr></table></figure></li>\n<li><p>进入 Recovery TWRP</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">fastboot boot twrp.img</span><br><span class=\"line\">&#x2F;&#x2F; OR</span><br><span class=\"line\">fastboot reboot</span><br></pre></td></tr></table></figure>\n<p>如果未按预期进入TWRP，则，在Fastboot模式下，长按<code>音量上</code>+<code>电源</code>，等看到小米log时，只松开<code>电源</code>键，直到出现TWRP，再松开<code>音量上</code>。</p>\n</li>\n</ul>\n<p>清数据，FORMAT /data partition (NEVER wipe System or Persist!)</p>\n<ul>\n<li>刷ROOM镜像</li>\n</ul>\n<p>把ROOM镜像放到手机存储</p>\n<ul>\n<li>完成</li>\n</ul>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"新系统引导界面，卡在Google账号验证\"><a href=\"#新系统引导界面，卡在Google账号验证\" class=\"headerlink\" title=\"新系统引导界面，卡在Google账号验证\"></a>新系统引导界面，卡在Google账号验证</h2><p>Tip: 刷机前，应在老系统中退出Google账号登陆，否则就会遇到这个问题。<br>如果你的网络可以穿墙，在手机尚无法安装设置其他app的情况下，其实这也不算个事儿。</p>\n<p>解决办法：关闭新系统新机引导界面</p>\n<ol>\n<li>进入 Recovery TWRP</li>\n<li>在菜单中完成/system分区。以防万一，adb中再次挂载<code>adb remount /system</code></li>\n<li>进入shell，关闭引导<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">adb shell</span><br><span class=\"line\">echo &quot;ro.setupwizard.mode&#x3D;DISABLED&quot; &gt;&gt; &#x2F;system&#x2F;build.prop</span><br></pre></td></tr></table></figure></li>\n<li>系统重启</li>\n</ol>\n","tags":["刷机","Android"]},{"title":"Shell | 删除最老的一份备份","url":"/2020/07/29/Shell-script-NO001/","content":"<h2 id=\"备份文件夹多于5个的话，删除最老的那个文件夹\"><a href=\"#备份文件夹多于5个的话，删除最老的那个文件夹\" class=\"headerlink\" title=\"备份文件夹多于5个的话，删除最老的那个文件夹\"></a>备份文件夹多于5个的话，删除最老的那个文件夹</h2><p>假设：<code>/home/backup/</code>下会定时生成备份目录，为省空间，最多允许保存<code>5</code>份备份，如果超过则删除最老的一份。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">SAVED_NUM=5</span><br><span class=\"line\">num=`ls -l /home/backup/ | grep <span class=\"string\">&#x27;^d&#x27;</span> | wc -l`;</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$num</span> -ge <span class=\"variable\">$SAVED_NUM</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    rmfolder=`ls -tr /home/backup/ | head -n1`</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;To be deleted: <span class=\"variable\">$&#123;rmfolder&#125;</span>&quot;</span></span><br><span class=\"line\">    rm -rf <span class=\"string\">&quot;/home/backup/<span class=\"variable\">$&#123;rmfolder&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>讲解</strong><br>grep ‘^d’: 筛选出文件夹（因为文件夹属性信息是d开头）<br>wc -l    : 统计行数，即，统计有多少个文件夹<br>-ge      : 大于等于<br>ls -tr   : 按从旧到新排序，旧的排在前面<br>head -n1 : 选取排列的第一个文件，1可以按需改成其他数值</p>\n","tags":["Linux","Shell","Script"]},{"title":"k8s | 查看k8s中应用的运行log","url":"/2020/08/05/View-pod-log-in-K8S/","content":"<p>自从应用的部署从tomcat转移到kubernetes之后，再也不能像下面这样一句命令查看日志了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tail -f &#x2F;usr&#x2F;local&#x2F;tomcat6&#x2F;logs&#x2F;catalina.out</span><br></pre></td></tr></table></figure>\n\n<p>在我记住k8s操作步骤之前，暂时记录下来以备忘。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-找到pod\"><a href=\"#1-找到pod\" class=\"headerlink\" title=\"1. 找到pod\"></a>1. 找到pod</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get pods -n&#x3D;test -o wide</span><br><span class=\"line\">&#x2F;&#x2F; or</span><br><span class=\"line\">kubectl get pods --namespace&#x3D;test -o wide</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                       READY   STATUS    RESTARTS   AGE   IP        NODE        NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">mysql-df95554c9-hszrl      1&#x2F;1     Running   0          39d   a.b.c.d   k8s-node4   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">my-app-7c8fb75b76-spm8n    2&#x2F;2     Running   0          45m   a.b.c.d   k8s-node1   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-n=test</code>: 指定命名空间</li>\n<li><code>-o wide</code>: 显示更多内容</li>\n</ul>\n<h2 id=\"2-找到container\"><a href=\"#2-找到container\" class=\"headerlink\" title=\"2. 找到container\"></a>2. 找到container</h2><p>当pod上有多个container时，需要明确查看哪个。</p>\n<p>查找container的方式有两个，</p>\n<ol>\n<li>在应用部署的对应yaml文件中找到containers-&gt;name</li>\n<li>在pod详情中找Container:<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl describe pod my-app-7c8fb75b76-spm8n -n&#x3D;test</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>如果缺省这步的话，查看日志可能会遇到下面的提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]# kubectl logs -f my-app-7c8fb75b76-spm8n -n test --tail&#x3D;500 --v&#x3D;1</span><br><span class=\"line\">Error from server (BadRequest): a container name must be specified for pod my-app-7c8fb75b76-spm8n, choose one of: [my-app filebeat]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-查看日志\"><a href=\"#3-查看日志\" class=\"headerlink\" title=\"3. 查看日志\"></a>3. 查看日志</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl logs -f my-app-7c8fb75b76-spm8n -c partner-kpi -n test --tail&#x3D;500 --v&#x3D;1</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>-c partner-kpi</code>: container容器</li>\n<li><code>--tail=500</code>: 显示最新500行。可以换成<code>--since=1h</code>，这个也很实用</li>\n<li><code>--v=1</code>: 日志级别1</li>\n</ul>\n<p>另外，k8s的命令中=号可以省略。</p>\n","tags":["k8s","kubernetes"]},{"title":"JUnit | 参数化测试用例","url":"/2020/08/13/JUnit-Parameterized-Test/","content":"<p>在JUnit5中，可以将<code>@Test</code>替换成<code>@ParameterizedTest</code>，这样就可以使用不同的参数、多次循环运行测试方法。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"ValueSource\"><a href=\"#ValueSource\" class=\"headerlink\" title=\"@ValueSource\"></a><code>@ValueSource</code></h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;this is demo 1&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ParameterizedTest</span></span><br><span class=\"line\"><span class=\"meta\">@ValueSource(ints = &#123; 1, 2, 3 &#125;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test_Demo1</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> expected = <span class=\"number\">2</span>;</span><br><span class=\"line\">    assertEquals(expected, arg, <span class=\"string\">&quot;You are not such 2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;this is demo 2&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ParameterizedTest(name = &quot;&#123;index&#125; ==&gt; the testcase is running&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ValueSource(strings = &#123;&quot;1&quot;, &quot;2&quot;, &quot;3,4&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test_Demo2</span><span class=\"params\">(String arg)</span> </span>&#123;</span><br><span class=\"line\">    assertNull(arg, <span class=\"string\">&quot;不应空虚&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    String expected = <span class=\"string\">&quot;2&quot;</span>;</span><br><span class=\"line\">    assertEquals(expected, arg, <span class=\"string\">&quot;You are not such 2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>@ValueSource</code>中，可以使用strings、ints等等。但是，我个人更<strong>倾向于使用strings</strong>，因为String可以隐式转换为很多格式，这样传参更灵活一些。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ParameterizedTest</span></span><br><span class=\"line\"><span class=\"meta\">@ValueSource(strings = &#123;&quot;true&quot;, &quot;false&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test_Demo3</span><span class=\"params\">(<span class=\"keyword\">boolean</span> arg)</span> </span>&#123;</span><br><span class=\"line\">    assertTrue(arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ParameterizedTest</span></span><br><span class=\"line\"><span class=\"meta\">@ValueSource(strings = &#123;&quot;0&quot;, &quot;1.1&quot;, &quot;2.2&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test_Demo4</span><span class=\"params\">(BigDecimal arg)</span> </span>&#123;</span><br><span class=\"line\">    assertEquals(BigDecimal.ZERO, arg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests-argument-conversion-implicit\">String可以自动转换成哪些格式？</a></p>\n<h1 id=\"CsvSource\"><a href=\"#CsvSource\" class=\"headerlink\" title=\"@CsvSource\"></a><code>@CsvSource</code></h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ParameterizedTest</span></span><br><span class=\"line\"><span class=\"meta\">@CsvSource(&#123;</span></span><br><span class=\"line\"><span class=\"meta\">    &quot;  85,  体育,         true&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">    &quot;99.5,  &#x27;语,数,外&#x27;,   false&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test_Demo5</span><span class=\"params\">(BigDecimal score, String subject, <span class=\"keyword\">boolean</span> isWin)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ArgumentsAccessor-参数聚合器\"><a href=\"#ArgumentsAccessor-参数聚合器\" class=\"headerlink\" title=\"ArgumentsAccessor 参数聚合器\"></a>ArgumentsAccessor 参数聚合器</h2><p>通过<code>ArgumentsAccessor</code>一次接收多个参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ParameterizedTest</span></span><br><span class=\"line\"><span class=\"meta\">@CsvSource(&#123;</span></span><br><span class=\"line\"><span class=\"meta\">    &quot;  85,  体育,         true&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">    &quot;99.5,  &#x27;语,数,外&#x27;,   false&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test_Demo6</span><span class=\"params\">(ArgumentsAccessor args)</span> </span>&#123;</span><br><span class=\"line\">    args.get(<span class=\"number\">0</span> , BigDecimal.class);</span><br><span class=\"line\">    args.get(<span class=\"number\">1</span>, String.class); <span class=\"comment\">// OR args.getString(1);</span></span><br><span class=\"line\">    args.get(<span class=\"number\">2</span>, Boolean.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://junit.org/junit5/docs/current/api/org.junit.jupiter.params/org/junit/jupiter/params/aggregator/ArgumentsAccessor.html\">ArgumentsAccessor doc api</a></p>\n<h1 id=\"CsvFileSource\"><a href=\"#CsvFileSource\" class=\"headerlink\" title=\"@CsvFileSource\"></a><code>@CsvFileSource</code></h1><p>和<code>@CsvSource</code>的区别，从csv文件读取测试数据，传参等用法相同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ParameterizedTest</span></span><br><span class=\"line\"><span class=\"meta\">@CsvFileSource(resources = &quot;/login-data.csv&quot;, numLinesToSkip = 1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_Demo7</span><span class=\"params\">(ArgumentsAccessor args)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","tags":["junit"]},{"title":"Selenium | 借助JavaScript实现一些不易处理的操作","url":"/2020/09/07/useful-JS-utils-in-Selenium/","content":"<h1 id=\"JavascriptExecutor\"><a href=\"#JavascriptExecutor\" class=\"headerlink\" title=\"JavascriptExecutor\"></a>JavascriptExecutor</h1><p>Javascript脚本执行器。</p>\n<p><code>arguments[i]</code>是js脚本传参的占位符，i从0开始。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"页面滚动\"><a href=\"#页面滚动\" class=\"headerlink\" title=\"页面滚动\"></a>页面滚动</h1><p>jse方式滚动页面的几种方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">JavascriptExecutor jse = (JavascriptExecutor)driver;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 滚动到某元素（tips：适用于元素不可见或被遮挡）</span></span><br><span class=\"line\">jse.executeScript(<span class=\"string\">&quot;arguments[0].scrollIntoView();&quot;</span>, element);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向下滚动</span></span><br><span class=\"line\">jse.executeScript(<span class=\"string\">&quot;window.scrollBy(0, 500)&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">jse.executeScript(<span class=\"string\">&quot;scroll(0, 500);&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 滚动到底部</span></span><br><span class=\"line\">jse.executeScript(<span class=\"string\">&quot;window.scrollTo(0, document.body.scrollHeight)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 动态元素的高度</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> ImageHeight = eachtile.getSize().getHeight();</span><br><span class=\"line\"><span class=\"keyword\">double</span> f = <span class=\"number\">1.04</span>*ImageHeight;</span><br><span class=\"line\">((JavascriptExecutor)driver).executeScript(<span class=\"string\">&quot;window.scrollBy(0,arguments[0]);&quot;</span>, -f);</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"元素内取值\"><a href=\"#元素内取值\" class=\"headerlink\" title=\"元素内取值\"></a>元素内取值</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;item-price&quot;&gt;700 Yuan&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class&#x3D;&quot;item-price&quot;&gt;</span><br><span class=\"line\">  &lt;span&gt;500 Yuan&lt;&#x2F;span&gt;</span><br><span class=\"line\">  400 Yuan</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>div可能有span也可能没有，但要不取出span中的文本，即，期望得到700 Yuan和400 Yuan</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">WebElement element = driver.findElement(By.xpath(<span class=\"string\">&quot;//div[contains(@class, &#x27;item-price&#x27;)]&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">JavascriptExecutor jse = (JavascriptExecutor)driver;</span><br><span class=\"line\">jse.executeScript(<span class=\"string\">&quot;return arguments[0].lastChild.textContent;&quot;</span>, element);</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"list超长，点击其中“不可见”的选项\"><a href=\"#list超长，点击其中“不可见”的选项\" class=\"headerlink\" title=\"list超长，点击其中“不可见”的选项\"></a>list超长，点击其中“不可见”的选项</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selectListByJS</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    JavascriptExecutor js = (JavascriptExecutor) driver;</span><br><span class=\"line\">    String css;</span><br><span class=\"line\">    css = <span class=\"string\">&quot;document.querySelectorAll(&#x27;.select-menu&#x27;)[0].querySelector(&#x27;.select-option:nth-child(24)&#x27;).click();&quot;</span>;</span><br><span class=\"line\">    js.executeScript(css);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改属性，使可见。</span></span><br><span class=\"line\"><span class=\"comment\">// tip：还没验证过</span></span><br><span class=\"line\">String strJs = <span class=\"string\">&quot;document.getElementsByClassName(&#x27;arguments[0]&#x27;).style.height=&#x27;auto&#x27;; document.getElementsByClassName(&#x27;arguments[0]&#x27;).style.visibility=&#x27;visible&#x27;;&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"点击元素\"><a href=\"#点击元素\" class=\"headerlink\" title=\"点击元素\"></a>点击元素</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过JavaScript实现点击元素。</span></span><br><span class=\"line\"><span class=\"comment\"> * tips：适用于click()失效时</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> element</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clickByJS</span><span class=\"params\">(WebElement element)</span> </span>&#123;</span><br><span class=\"line\">\tJavascriptExecutor jse = (JavascriptExecutor)driver;</span><br><span class=\"line\">\tjse.executeScript(<span class=\"string\">&quot;arguments[0].click()&quot;</span>, element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h1><p><a href=\"https://www.guru99.com/execute-javascript-selenium-webdriver.html\">https://www.guru99.com/execute-javascript-selenium-webdriver.html</a></p>\n","tags":["Selenium","JavaScript"]},{"title":"Raspberry | 树莓派4b系统安装、配置","url":"/2020/12/20/Raspberry4b/","content":"<h1 id=\"购买树莓派的原因\"><a href=\"#购买树莓派的原因\" class=\"headerlink\" title=\"购买树莓派的原因\"></a>购买树莓派的原因</h1><ul>\n<li>家里没有NAS，想随时访问那几块闲置的移动硬盘不方便</li>\n<li>给小米电视额外增加一个输入源</li>\n<li>希望从外网访问家里的网络</li>\n<li>通过树莓派下载视频到移动硬盘</li>\n</ul>\n<span id=\"more\"></span>\n\n<h1 id=\"硬件情况\"><a href=\"#硬件情况\" class=\"headerlink\" title=\"硬件情况\"></a>硬件情况</h1><ul>\n<li>2020年产 Raspberry 4b，内存4G</li>\n<li>32G TF存储卡</li>\n<li>安装系统、配置过程中，树莓派不外接 键盘、鼠标、显示器</li>\n<li>存储卡插入笔记本</li>\n<li>树莓派连接笔记本提供的无线热点</li>\n<li>在笔记本上，ssh连接树莓派完成安装配置操作</li>\n</ul>\n<h1 id=\"选择系统\"><a href=\"#选择系统\" class=\"headerlink\" title=\"选择系统\"></a>选择系统</h1><p>网上看了一些文章说，4G内存的树莓派运行64位系统完全没问题，所以，我选择了64位系统。</p>\n<p>先是尝试安装了<code>Ubuntu 64位LST版</code>（<a href=\"https://ubuntu.com/download/raspberry-pi\">安装包</a>），过程很不顺利，放弃了。</p>\n<p>最终安装的<code>官方64位版OS</code>。</p>\n<p>所以，先在笔记本上下载<a href=\"https://downloads.raspberrypi.org/raspios_arm64/images/\">raspios_arm64 zip包</a>。</p>\n<h1 id=\"写入OS\"><a href=\"#写入OS\" class=\"headerlink\" title=\"写入OS\"></a>写入OS</h1><p>官方提供的烧录OS工具 <a href=\"https://www.raspberrypi.org/software/\">Raspberry Pi Imager</a> 非常简单、易用，但是，对于我来说不适用，原因是其一它没有提供官方的64位系统，其二使用这种方法的话，我没有找到在不外接键盘、鼠标情况下，访问系统的方法。</p>\n<p>我使用的工具是<a href=\"https://www.raspberrypi.org/documentation/installation/installing-images/windows.md\">Win32DiskImager</a>，将系统zip写入存储卡。</p>\n<h1 id=\"预配置\"><a href=\"#预配置\" class=\"headerlink\" title=\"预配置\"></a>预配置</h1><p>在笔记本上打开存储卡，在boot目录下</p>\n<ul>\n<li>开启ssh访问：新建空文件<code>ssh</code></li>\n<li>配置热点连接：新建<code>wpa_supplicant.conf</code>文件，内容如下</li>\n</ul>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class=\"line\">update_config=1</span><br><span class=\"line\">country=CN</span><br><span class=\"line\">ap_scan=1</span><br><span class=\"line\">fast_reauth=1</span><br><span class=\"line\"></span><br><span class=\"line\">network=&#123;</span><br><span class=\"line\">  ssid=&quot;hotspot-name-on-your-pc&quot;</span><br><span class=\"line\">  psk=&quot;hotspot-password&quot;</span><br><span class=\"line\">  priority=1</span><br><span class=\"line\">  id_str=&quot;hotspot&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">network=&#123;</span><br><span class=\"line\">  ssid=&quot;wifi-name&quot;</span><br><span class=\"line\">  psk=&quot;wifi-password&quot;</span><br><span class=\"line\">  priority=2</span><br><span class=\"line\">  id_str=&quot;home5g&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>官方对无线网配置的讲解：<br><a href=\"https://www.raspberrypi.org/documentation/configuration/wireless/headless.md\">https://www.raspberrypi.org/documentation/configuration/wireless/headless.md</a><br><a href=\"https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md\">https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md</a></p>\n<p>注意：psk加双引号直接写明文密码，不加双引号则需要转换成32位预加密<code>wpa_passphrase &quot;your pasword&quot;</code></p>\n<h1 id=\"启动Pi\"><a href=\"#启动Pi\" class=\"headerlink\" title=\"启动Pi\"></a>启动Pi</h1><p>先将内存卡插入树莓派，再插入电源后，树莓派将会自动启动。</p>\n<h1 id=\"登录Pi\"><a href=\"#登录Pi\" class=\"headerlink\" title=\"登录Pi\"></a>登录Pi</h1><p>在热点管理or路由器管理界面，查找树莓派的IP。</p>\n<p><code>ssh</code>访问树莓派：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh pi@IP-of-raspberry</span><br></pre></td></tr></table></figure>\n<p>树莓派官方系统的默认登录名和密码是<code>pi / raspberry</code>。</p>\n<h1 id=\"apt改国内源\"><a href=\"#apt改国内源\" class=\"headerlink\" title=\"apt改国内源\"></a>apt改国内源</h1><p>本想换成国内的源，尝试了阿里和清华的源，暂时都不支持arm64位，所以，使用默认的吧。如果嫌慢可以挂vpn，会好很多。</p>\n<h1 id=\"pip-pip3改国内源\"><a href=\"#pip-pip3改国内源\" class=\"headerlink\" title=\"pip/pip3改国内源\"></a>pip/pip3改国内源</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir ~&#x2F;.pip</span><br><span class=\"line\">vi ~&#x2F;.pip&#x2F;pip.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[global]</span><br><span class=\"line\">timeout&#x3D;100</span><br><span class=\"line\">index-url&#x3D;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class=\"line\">extra-index-url&#x3D;https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host&#x3D;</span><br><span class=\"line\">    mirrors.aliyun.com</span><br><span class=\"line\">    pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置：开启VNC、设置分辨率，等\"><a href=\"#配置：开启VNC、设置分辨率，等\" class=\"headerlink\" title=\"配置：开启VNC、设置分辨率，等\"></a>配置：开启VNC、设置分辨率，等</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo raspi-config</span><br></pre></td></tr></table></figure>\n<p>使用方向键控制光标，Enter键选择：</p>\n<ul>\n<li>在<code>Interfacing Options</code>中，找到<code>VNC</code>，选择<code>Yes</code></li>\n<li>在<code>Boot Options</code>中，找到<code>Desktop/CLI</code>，选择<code>Desktop Autologin</code></li>\n<li>在<code>Advanced Options</code>中，找到<code>Resolution</code>，选择<code>1920*1080</code></li>\n<li>在<code>Advanced Options</code>中，选择<code>Expand Filesystem</code></li>\n<li>通过<code>Tab</code>键，选择<code>Finish</code>，<code>Enter</code>触发reboot</li>\n</ul>\n<p>至此，树莓派配置完毕，重启后就可以vnc访问了，也可以连到电视上了。</p>\n<h1 id=\"【可选】安装aria\"><a href=\"#【可选】安装aria\" class=\"headerlink\" title=\"【可选】安装aria\"></a>【可选】安装aria</h1><p>安装如下内容：</p>\n<ul>\n<li>aria</li>\n<li>AriaNg：前端web管理界面，推荐使用<a href=\"https://github.com/mayswind/AriaNg/releases\">All in One包</a></li>\n</ul>\n<p>开始时，使用<code>sudo apt install aria2</code>，自己修改配置，可惜下载速度不理想。然后，改用了git上的一个热门项目<a href=\"https://github.com/P3TERX/aria2.sh\">“Aria2一键安装管理脚本（增强版）”</a></p>\n<p>安装成功后，重现运行脚本，完成如下配置：</p>\n<ul>\n<li>选择<code>修改 配置</code>，再<code>修改 Aria2 下载目录</code></li>\n<li>开启<code>自动更新 BT-Tracker</code></li>\n</ul>\n<p>此时，打开AriaNg网页，<code>Aria2 状态</code>一直显示“连接中”，并且，错误弹窗提示：认证失败!</p>\n<blockquote>\n<p>解决办法</p>\n<ol>\n<li>打开配置文件<code>/root/.aria2c/aria2.conf</code>，找到<code>rpc-secret=</code>复制其内容</li>\n<li>在web中，打开<code>AriaNg 设置——RPC (localhost:6800)</code>，粘贴“Aria2 RPC 密钥”。该页面的url示例，形如，<a href=\"http://loclhost/AriaNg/index.html#!/settings/ariang\">http://loclhost/AriaNg/index.html#!/settings/ariang</a></li>\n</ol>\n</blockquote>\n","tags":["Raspberry 4b","树莓派"]},{"title":"Java | 使用EasyExcel读取excel","url":"/2021/02/06/use-easyexcel-to-read-excel/","content":"<h1 id=\"EasyExcel-？\"><a href=\"#EasyExcel-？\" class=\"headerlink\" title=\"EasyExcel ？\"></a>EasyExcel ？</h1><p>以前我都是用<code>Apache poi</code>解析Excel，但我不喜欢自己处理模型转换、数值类型转换，而且poi处理大excel时内存高。后来听说了阿里开源的EasyExcel，决定试用下。</p>\n<p>官方如此自我介绍：</p>\n<blockquote>\n<p>快速、简单避免OOM的Java处理Excel工具</p>\n<p>EasyExcel是一个基于Java的简单、省内存的读写Excel的开源项目。在尽可能节约内存的情况下支持读写百M的Excel。 github地址：<a href=\"https://github.com/alibaba/easyexcel\">https://github.com/alibaba/easyexcel</a></p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h1 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h1><p>我的maven pom文件如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jdk.version</span>&gt;</span>11<span class=\"tag\">&lt;/<span class=\"name\">jdk.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>easyexcel<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 以下非必须，视自己的实际情况决定是否引入 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.validation<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>validation-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"极简读Excel示例\"><a href=\"#极简读Excel示例\" class=\"headerlink\" title=\"极简读Excel示例\"></a>极简读Excel示例</h1><h2 id=\"1-数据类DemoBizExcelRow-java，存储excel一行的数据\"><a href=\"#1-数据类DemoBizExcelRow-java，存储excel一行的数据\" class=\"headerlink\" title=\"1. 数据类DemoBizExcelRow.java，存储excel一行的数据\"></a>1. 数据类<code>DemoBizExcelRow.java</code>，存储excel一行的数据</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span> <span class=\"comment\">// 使用lombok，或自己实现get/set</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoBizExcelRow</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String string;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date date;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Double doubleData;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-自定义数据行监听类DemoDataListener-java，逐行解析数据\"><a href=\"#2-自定义数据行监听类DemoDataListener-java，逐行解析数据\" class=\"headerlink\" title=\"2. 自定义数据行监听类DemoDataListener.java，逐行解析数据\"></a>2. 自定义数据行监听类<code>DemoDataListener.java</code>，逐行解析数据</h2><p>如果想要获得解析结果集的话，可以像下面这样通过构造函数传参来接收。如果要在监听类里完成DB存储操作，可以参考官方示例<code>DemoDataListener.java</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoDataListener</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnalysisEventListener</span>&lt;<span class=\"title\">DemoBizExcelRow</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;DemoBizExcelRow&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;DemoBizExcelRow&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoDataListener</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果使用了spring，请使用这个构造方法。每次创建Listener的时候需要把spring管理的类传进来</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoDataListener</span><span class=\"params\">(List&lt;DemoBizExcelRow&gt; list)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.list = list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这个每一条数据解析都会来调用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data</span></span><br><span class=\"line\"><span class=\"comment\">     *            one row value. Is is same as &#123;<span class=\"doctag\">@link</span> AnalysisContext#readRowHolder()&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">invoke</span><span class=\"params\">(DemoBizExcelRow data, AnalysisContext context)</span> </span>&#123;</span><br><span class=\"line\">        list.add(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 所有数据解析完成了 都会来调用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doAfterAllAnalysed</span><span class=\"params\">(AnalysisContext context)</span> </span>&#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-使用\"><a href=\"#3-使用\" class=\"headerlink\" title=\"3. 使用\"></a>3. 使用</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String file = <span class=\"string\">&quot;D:\\\\Demo.xlsx&quot;</span>;</span><br><span class=\"line\">List&lt;DemoExcelRow&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;DemoExcelRow&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    EasyExcel.read(file, DemoExcelRow.class, <span class=\"keyword\">new</span> DemoDataListener&lt;&gt;(list))</span><br><span class=\"line\">            .sheet(<span class=\"number\">0</span>)</span><br><span class=\"line\">            .headRowNumber(<span class=\"number\">1</span>)</span><br><span class=\"line\">            .doRead();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    LOGGER.error(<span class=\"string\">&quot;e=&#123;&#125;&quot;</span>, e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用起来不复杂，自己只要做两件事：1.定义数据类 2.自定义监听（用于获取excel内容，或者完成dao操作等等）</p>\n<h1 id=\"自定义读取Excel\"><a href=\"#自定义读取Excel\" class=\"headerlink\" title=\"自定义读取Excel\"></a>自定义读取Excel</h1><p>可是，在我自己的实际使用中，我还需要以下的功能：</p>\n<ul>\n<li>表头有多行，每类业务表excel还互不相同</li>\n<li>获取表头数据，至少包括排序、列名</li>\n<li>校验部分表头名，以确保excel符合要求，如不符，直接退出</li>\n<li>解析时数据校验，比如，必填项不能为空，特定列的值不能超出某个范围，特定列值通过enum转换</li>\n<li>获取每行中所有错误列集合，然而，官方默认行为是，遇到某个单元格有误的时候忽略剩余单元格，跳到下一行</li>\n</ul>\n<h2 id=\"1-返回结果类\"><a href=\"#1-返回结果类\" class=\"headerlink\" title=\"1. 返回结果类\"></a>1. 返回结果类</h2><p>上面的例子只返回了有效数据集合<code>List&lt;DemoExcelRow&gt;</code>，而现在想要a）有效数据 b）错误信息 c）表头信息，设计一个结果类处理起来更方便。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReadExcelResult</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表头map。</span></span><br><span class=\"line\"><span class=\"comment\">     * 行index-&gt;表头整行</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Map&lt;Integer, Map&lt;Integer, CellData&gt;&gt; rowIdx2HeadMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 有效数据map。</span></span><br><span class=\"line\"><span class=\"comment\">     * 行index-&gt;数据整行</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Map&lt;Integer, T&gt; rowIdx2RowDataMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 错误行列map。</span></span><br><span class=\"line\"><span class=\"comment\">     * 行index-&gt;错误列index</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Map&lt;Integer, Set&lt;Integer&gt;&gt; rowIdx2ErrColIdxMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化变量，使之都不为空</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReadExcelResult</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.rowIdx2HeadMap = <span class=\"keyword\">new</span> TreeMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.rowIdx2RowDataMap = <span class=\"keyword\">new</span> TreeMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.rowIdx2ErrColIdxMap = <span class=\"keyword\">new</span> TreeMap&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-数据类DemoExcelRow-java\"><a href=\"#2-数据类DemoExcelRow-java\" class=\"headerlink\" title=\"2. 数据类DemoExcelRow.java\"></a>2. 数据类<code>DemoExcelRow.java</code></h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span> <span class=\"comment\">// 使用lombok，或自己实现get/set</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoExcelRow</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表头所在行</span></span><br><span class=\"line\"><span class=\"comment\">     * 行号从1开始</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ExcelIgnore</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> HEAD_ROW_NUMBER = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 列数</span></span><br><span class=\"line\"><span class=\"comment\">     * index从0开始，last_index==列数-1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ExcelIgnore</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> COLUMN_LAST_NUMBER = <span class=\"number\">37</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 期望的表头</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;主要用于表格合法性校验。这里可以只校验必要的字段，即，配置实际excel的表头字段的子集。&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;当为null时，不校验表头&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;key是表头排序，即columnIndex，从0开始；&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;value是表头名，可以忽略前后空格，但必须包含中间空格和换行&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ExcelIgnore</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Map&lt;Integer, String&gt; HEAD_CHECK_MAP = <span class=\"keyword\">new</span> HashMap&lt;&gt;() &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            put( <span class=\"number\">0</span>, <span class=\"string\">&quot;索引号&quot;</span>);</span><br><span class=\"line\">            put( <span class=\"number\">1</span>, <span class=\"string\">&quot;选取样本特征&quot;</span>);</span><br><span class=\"line\">            put( <span class=\"number\">2</span>, <span class=\"string\">&quot;发函单位（客户）*&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* ---- 以下是表格一一对应的字段 ---- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExcelProperty(&#123;&quot;索引号&quot;&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String string;</span><br><span class=\"line\">    <span class=\"meta\">@ExcelProperty(value = &quot;会计科目&quot;, converter = SubjectConverter.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String subject;</span><br><span class=\"line\">    <span class=\"meta\">@ExcelProperty(&quot;存款日期&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date date;</span><br><span class=\"line\">    <span class=\"meta\">@ExcelProperty(index = 5)</span></span><br><span class=\"line\">    <span class=\"meta\">@NumberFormat(&quot;#.##&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Double doubleData;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getHeadRowNumber</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HEAD_ROW_NUMBER;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getColumnLastNumber</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> COLUMN_LAST_NUMBER;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;Integer, String&gt; <span class=\"title\">getHeadCheckMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HEAD_CHECK_MAP;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解读：</p>\n<ul>\n<li>变量<code>subject</code>一个转换器，下面会说</li>\n<li>变量<code>doubleData</code>通过注解<code>@NumberFormat(&quot;#.##&quot;)</code>指定两位小数，通过<code>@ExcelProperty(index = 5)</code>设定它在第6列</li>\n<li>默认所有字段都会和excel匹配，通过<code>@ExcelIgnore</code>说明某变量不是excel中的字段</li>\n<li><code>HEAD_ROW_NUMBER</code>真正的表头所在行</li>\n<li><code>HEAD_CHECK_MAP</code>用于表头校验的map</li>\n</ul>\n<h2 id=\"3-转换器\"><a href=\"#3-转换器\" class=\"headerlink\" title=\"3. 转换器\"></a>3. 转换器</h2><p>转换器<code>SubjectConverter.java</code>将excel中的文本转成enum中的1、2、3，如本例中，读到”应收账款”转存为16。</p>\n<p>下面的代码只有<code>convertToJavaData()</code>被修改了，其他都是继承来的，IDE会自动生成，所以这部分不写了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubjectConverter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Converter</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 省略了一些代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 往来明细表 往来账项列示  会计科目</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Map&lt;String, Integer&gt; CONTACT_SUBJECT_MAP = <span class=\"keyword\">new</span> HashMap&lt;&gt;() &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            put(<span class=\"string\">&quot;应收账款&quot;</span>,<span class=\"number\">16</span>);</span><br><span class=\"line\">            put(<span class=\"string\">&quot;预收款项&quot;</span>,<span class=\"number\">17</span>);</span><br><span class=\"line\">            put(<span class=\"string\">&quot;应付账款&quot;</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">            put(<span class=\"string\">&quot;预付款项&quot;</span>,<span class=\"number\">19</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Convert excel objects to Java objects</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> cellData            Excel cell data.NotNull.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> contentProperty     Content property.Nullable.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> globalConfiguration Global configuration.NotNull.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Data to put into a Java object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception Exception.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">convertToJavaData</span><span class=\"params\">(CellData cellData, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        String key = cellData.getStringValue();</span><br><span class=\"line\">        Integer val = CONTACT_SUBJECT_MAP.get(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ParseException(<span class=\"string\">&quot;fail to convert 会计科目: &quot;</span> + key, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-自定义单元格解析的监听\"><a href=\"#4-自定义单元格解析的监听\" class=\"headerlink\" title=\"4. 自定义单元格解析的监听\"></a>4. 自定义单元格解析的监听</h2><p><code>ReadAllCellDataThrowExceptionLastListener.java</code>类照搬了官方<code>ModelBuildEventListener.java</code>，只是将其中遇到错误格中止当前行剩余内容，改成了遇到错误不中止继续读完整行。</p>\n<p>下面只写出被修改的函数，相同部分不写了，直接在<code>ModelBuildEventListener.java</code>里抄了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReadAllCellDataThrowExceptionLastListener</span> <span class=\"keyword\">extends</span></span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">AbstractIgnoreExceptionReadListener</span>&lt;<span class=\"title\">Map</span>&lt;<span class=\"title\">Integer</span>, <span class=\"title\">CellData</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 省略了一些代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">buildUserModel</span><span class=\"params\">(Map&lt;Integer, CellData&gt; cellDataMap, ReadHolder currentReadHolder,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                  AnalysisContext context)</span> </span>&#123;</span><br><span class=\"line\">        ExcelReadHeadProperty excelReadHeadProperty = currentReadHolder.excelReadHeadProperty();</span><br><span class=\"line\">        Object resultModel;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            resultModel = excelReadHeadProperty.getHeadClazz().getDeclaredConstructor().newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ExcelDataConvertException(context.readRowHolder().getRowIndex(), <span class=\"number\">0</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> CellData(CellDataTypeEnum.EMPTY), <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Can not instance class: &quot;</span> + excelReadHeadProperty.getHeadClazz().getName(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Map&lt;Integer, Head&gt; headMap = excelReadHeadProperty.getHeadMap();</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;(headMap.size() * <span class=\"number\">4</span> / <span class=\"number\">3</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\">        Map&lt;Integer, ExcelContentProperty&gt; contentPropertyMap = excelReadHeadProperty.getContentPropertyMap();</span><br><span class=\"line\">        LinkedList&lt;ExcelDataConvertException&gt; exceptionLinkedList = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Integer, Head&gt; entry : headMap.entrySet()) &#123;</span><br><span class=\"line\">            Integer index = entry.getKey();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!cellDataMap.containsKey(index)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            CellData cellData = cellDataMap.get(index);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cellData.getType() == CellDataTypeEnum.EMPTY) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ExcelContentProperty excelContentProperty = contentPropertyMap.get(index);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Object value = ConverterUtils.convertToJavaObject(cellData, excelContentProperty.getField(),</span><br><span class=\"line\">                        excelContentProperty, currentReadHolder.converterMap(), currentReadHolder.globalConfiguration(),</span><br><span class=\"line\">                        context.readRowHolder().getRowIndex(), index);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    map.put(excelContentProperty.getField().getName(), value);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ExcelDataConvertException e) &#123;</span><br><span class=\"line\">                exceptionLinkedList.add(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(exceptionLinkedList)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//没有异常，则转换为需要的map</span></span><br><span class=\"line\">            BeanMap.create(resultModel).putAll(map);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resultModel;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//存在异常，挨个抛出，最后一个异常往外抛结束运行</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; exceptionLinkedList.size(); i++) &#123;</span><br><span class=\"line\">                ExcelDataConvertException exception = exceptionLinkedList.get(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == exceptionLinkedList.size() - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 最后</span></span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> exception;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    handleException(context, exception);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleException</span><span class=\"params\">(AnalysisContext analysisContext, Exception e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ReadListener readListenerException : analysisContext.currentReadHolder().readListenerList()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                readListenerException.onException(e, analysisContext);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RuntimeException re) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> re;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e1) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ExcelAnalysisException(e1.getMessage(), e1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-自定义数据行解析的监听\"><a href=\"#5-自定义数据行解析的监听\" class=\"headerlink\" title=\"5. 自定义数据行解析的监听\"></a>5. 自定义数据行解析的监听</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBizDemoListener</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AnalysisEventListener</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 期望的表头</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;用于表格合法性校验。这里可以只校验必要的字段，即，配置实际excel的表头字段的子集。&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;当为null时，不校验表头&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;key是表头排序，即columnIndex，从0开始；&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;value是表头名，可以忽略前后空格，但必须包含中间空格和换行&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Map&lt;Integer, String&gt; headCheckMap;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 读取excel后，存入该对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> ReadExcelResult&lt;T&gt; readExcelResult;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表头行/列</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Map&lt;Integer, Map&lt;Integer, CellData&gt;&gt; rowIdx2HeadMap = <span class=\"keyword\">new</span> TreeMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 有效行/列信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Map&lt;Integer, T&gt; rowIdx2RowDataMap = <span class=\"keyword\">new</span> TreeMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 错误行/列信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Map&lt;Integer, Set&lt;Integer&gt;&gt; rowIdx2ErrColIdxMap = <span class=\"keyword\">new</span> TreeMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当前行的错误列index集合</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Set&lt;Integer&gt; currentRowErrorColumnIndexSet;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyBizDemoListener</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"keyword\">new</span> ReadExcelResult&lt;&gt;(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> readExcelResult 读取excel后，存入该对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> headCheckMap    表格头校验map。A map contains columnIndex&lt;-&gt;表头名. If null, do not check head</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyBizDemoListener</span><span class=\"params\">(ReadExcelResult&lt;T&gt; readExcelResult, Map&lt;Integer, String&gt; headCheckMap)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.readExcelResult = readExcelResult;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.headCheckMap = headCheckMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理表头</span></span><br><span class=\"line\"><span class=\"comment\">     * 一行一行调用该函数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> headMap -</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context -</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeHead</span><span class=\"params\">(Map&lt;Integer, CellData&gt; headMap, AnalysisContext context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.invokeHead(headMap, context);</span><br><span class=\"line\"></span><br><span class=\"line\">        ReadRowHolder readRowHolder = context.readRowHolder();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rowIndex = readRowHolder.getRowIndex();</span><br><span class=\"line\"></span><br><span class=\"line\">        rowIdx2HeadMap.put(rowIndex, headMap);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 表头合法性校验</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (headCheckMap != <span class=\"keyword\">null</span> &amp;&amp; !headCheckMap.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> headRowNumber = context.readSheetHolder().getHeadRowNumber();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (headRowNumber == rowIndex + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Integer key : headCheckMap.keySet()) &#123;</span><br><span class=\"line\">                    String expect = headCheckMap.get(key).trim();</span><br><span class=\"line\">                    CellData cell = headMap.get(key);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == cell) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//模板不符！退出</span></span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ExcelHeadException(<span class=\"string\">&quot;表头与预期不符。未找到表头：&quot;</span> + expect);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    String real = cell.getStringValue();</span><br><span class=\"line\">                    real = (real==<span class=\"keyword\">null</span>? <span class=\"keyword\">null</span> : real.trim());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!expect.equalsIgnoreCase(real)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//模板不符！退出</span></span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ExcelHeadException(<span class=\"string\">&quot;表头与预期不符。期望：&quot;</span> + expect + <span class=\"string\">&quot; &lt;--&gt; 实际：&quot;</span> + real);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * When analysis one row trigger invoke function.</span></span><br><span class=\"line\"><span class=\"comment\">     * 自动跳过空行，即，空行不会进入这个函数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data    one row value. Is is same as &#123;<span class=\"doctag\">@link</span> AnalysisContext#readRowHolder()&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context -</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">invoke</span><span class=\"params\">(T data, AnalysisContext context)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        currentRowErrorColumnIndexSet = <span class=\"keyword\">new</span> TreeSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        ReadRowHolder readRowHolder = context.readRowHolder();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rowIndex = readRowHolder.getRowIndex();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 非空校验方法。业务强相关，略去源码。可以通过特定的注解判断必填</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        ReadExcelUtil.checkNotEmpty(data, context, currentRowErrorColumnIndexSet);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 值有效性校验。业务强相关，略去源码</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        ReadExcelUtil.checkFieldValueInStringMap(data, <span class=\"string\">&quot;sendType&quot;</span>, ReadExcelConstant.SEND_TYPE_MAP, context, currentRowErrorColumnIndexSet);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentRowErrorColumnIndexSet.isEmpty()) &#123;</span><br><span class=\"line\">            rowIdx2RowDataMap.put(rowIndex, data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Set&lt;Integer&gt; errColIdxMap = rowIdx2ErrColIdxMap.get(rowIndex);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (errColIdxMap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                currentRowErrorColumnIndexSet.addAll(errColIdxMap);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            rowIdx2ErrColIdxMap.put(rowIndex, currentRowErrorColumnIndexSet);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * if have something to do after all analysis</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context -</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doAfterAllAnalysed</span><span class=\"params\">(AnalysisContext context)</span> </span>&#123;</span><br><span class=\"line\">        readExcelResult.setRowIdx2HeadMap(rowIdx2HeadMap);</span><br><span class=\"line\">        readExcelResult.setRowIdx2ErrColIdxMap(rowIdx2ErrColIdxMap);</span><br><span class=\"line\">        readExcelResult.setRowIdx2RowDataMap(rowIdx2RowDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The current method is called when extra information is returned</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> extra   extra information</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context -</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">extra</span><span class=\"params\">(CellExtra extra, AnalysisContext context)</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * All listeners receive this method when any one Listener does an error report. If an exception is thrown here, the</span></span><br><span class=\"line\"><span class=\"comment\">     * entire read will terminate.</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取其他异常下会调用本接口。抛出异常则停止读取。如果这里不抛出异常则 继续读取下一行。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> exception -</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context -</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onException</span><span class=\"params\">(Exception exception, AnalysisContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果是某一个单元格的转换异常，能获取到具体行号</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果要获取头的信息，配合invokeHeadMap使用</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> ExcelDataConvertException) &#123;</span><br><span class=\"line\">            ExcelDataConvertException excelDataConvertException = (ExcelDataConvertException)exception;</span><br><span class=\"line\">            Integer cellRowIndex = excelDataConvertException.getRowIndex();</span><br><span class=\"line\">            Integer cellColumnIndex = excelDataConvertException.getColumnIndex();</span><br><span class=\"line\"></span><br><span class=\"line\">            String cellColumnString = CellReference.convertNumToColString(cellColumnIndex);</span><br><span class=\"line\">            LOGGER.error(<span class=\"string\">&quot;第&#123;&#125;行&#123;&#125;列，数值转换异常：&#123;&#125;&quot;</span>, cellRowIndex+<span class=\"number\">1</span>, cellColumnString, exception.getMessage());</span><br><span class=\"line\"></span><br><span class=\"line\">            Set&lt;Integer&gt; errColIdxMap = rowIdx2ErrColIdxMap.get(cellRowIndex);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (errColIdxMap == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                errColIdxMap = <span class=\"keyword\">new</span> TreeSet&lt;&gt;();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            errColIdxMap.add(cellColumnIndex);</span><br><span class=\"line\">            rowIdx2ErrColIdxMap.put(cellRowIndex, errColIdxMap);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> ExcelHeadException) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            LOGGER.error(exception.getMessage());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 表格不符合规范，抛出异常，触发终止解析</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> exception;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            LOGGER.error(<span class=\"string\">&quot;第&#123;&#125;行解析失败，但是继续解析下一行。exception: \\n&#123;&#125;&quot;</span>,</span><br><span class=\"line\">                    context.readRowHolder().getRowIndex() + <span class=\"number\">1</span>,</span><br><span class=\"line\">                    Arrays.toString(exception.getStackTrace()).replaceAll(<span class=\"string\">&quot;,&quot;</span>, <span class=\"string\">&quot;\\n&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解读：</p>\n<ul>\n<li>在<code>invokeHead()</code>中，借助构造函数传入的变量<code>headCheckMap</code>校验excel表头</li>\n<li>在<code>onException()</code>中，仅当<code>throw exception</code>时才会终止excel解析，否则只是跳过到下一行</li>\n<li>在<code>invoke()</code>中，处理必填项、数值合法性校验等等</li>\n</ul>\n<h2 id=\"6-使用\"><a href=\"#6-使用\" class=\"headerlink\" title=\"6. 使用\"></a>6. 使用</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String file = <span class=\"string\">&quot;D:\\\\Demo.xlsx&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ReadExcelResult&lt;DemoBizExcelRow&gt; readExcelResult = <span class=\"keyword\">new</span> ReadExcelResult&lt;&gt;();</span><br><span class=\"line\">ExcelReader excelReader = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    MyBizDemoListener&lt;DemoBizExcelRow&gt; myBizDemoListener = <span class=\"keyword\">new</span> MyBizDemoListener&lt;&gt;(readExcelResult, DemoBizExcelRow.getHeadCheckMap());</span><br><span class=\"line\">    excelReader = EasyExcel.read(file, DemoBizExcelRow.class, <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            .useDefaultListener(<span class=\"keyword\">false</span>)</span><br><span class=\"line\">            .registerReadListener(<span class=\"keyword\">new</span> ReadAllCellDataThrowExceptionLastListener())</span><br><span class=\"line\">            .registerReadListener(myBizDemoListener)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">    ReadSheet readSheet = EasyExcel.readSheet(<span class=\"number\">0</span>).headRowNumber(DemoBizExcelRow.getHeadRowNumber()).build();</span><br><span class=\"line\">    excelReader.read(readSheet);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> ExcelHeadException) &#123;</span><br><span class=\"line\">        LOGGER.error(<span class=\"string\">&quot;Excel模板错误！&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        LOGGER.error(<span class=\"string\">&quot;其他异常&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (excelReader != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        excelReader.finish();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印 readExcelResult</span></span><br></pre></td></tr></table></figure>\n<p>解读：</p>\n<ul>\n<li><code>EasyExcel</code>默认提供了解析单元格的监听（即上面提到的<code>ModelBuildEventListener.java</code>），如果要使用自定义的单元格解析监听，要先去掉默认<code>useDefaultListener(false)</code>，再注册自己的<code>registerReadListener(new ReadAllCellDataThrowExceptionLastListener())</code></li>\n<li>在使用自定义单元格解析监听情况下，不能通过<code>EasyExcel.read()</code>传入自定义的行解析监听，只能通过<code>registerReadListener()</code>注册，并且，（这一点很重要）<strong>要放在注册自定义单元格监听之后</strong>。</li>\n</ul>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><h2 id=\"格式转换\"><a href=\"#格式转换\" class=\"headerlink\" title=\"格式转换\"></a>格式转换</h2><h3 id=\"日期\"><a href=\"#日期\" class=\"headerlink\" title=\"日期\"></a>日期</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExcelProperty(&quot;开始时间&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@DateTimeFormat(&quot;yyyy-MM-dd&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Date startTime;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>2020/1/2 –&gt; 1577894400000（即，2020-01-02）</li>\n<li>你好 –&gt; throw new Exception()</li>\n<li>// 转换失败时，会抛异常</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExcelProperty(&quot;结束时间&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@DateTimeFormat(&quot;yyyy-MM-dd&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String endTime;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>2019/2/5 –&gt; 2019-02-05</li>\n<li>你好 –&gt; 你好</li>\n<li>// 转换失败时，保持原值，不会抛异常</li>\n</ul>\n<h3 id=\"数值\"><a href=\"#数值\" class=\"headerlink\" title=\"数值\"></a>数值</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExcelProperty(&quot;存钱&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@NumberFormat(&quot;#.##&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Double deposit;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1.2345 –&gt; 1.23</li>\n<li>你好 –&gt; throw new Exception()</li>\n<li>// 转换失败时，会异常</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExcelProperty(&quot;取钱&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@NumberFormat(&quot;#.##&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String withdraw;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1.2345 –&gt; 1.23</li>\n<li>你好 –&gt; 你好</li>\n<li>// 转换失败时，保持原值，不会抛异常</li>\n</ul>\n","categories":["Code"],"tags":["Java","Excel"]},{"title":"Java | 使用IDEA的文件模板功能简化Spring Boot的类创建","url":"/2021/03/16/file-templates-in-IDEA/","content":"<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><ul>\n<li>IntelliJ IDEA Community 2020.3.3</li>\n</ul>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>在Spring Boot项目中，每当新增一个entity/module对象时，如<code>UserPO.java</code>，大多时候接下来还要创建对应的repository、service、service implement、controller等，并且最开始类的内容也是相似，一套模板类做下来，慢慢的重复劳动。</p>\n<p>于是，想着是否存在根据类模板“一键”创建多个类文件的功能，在<code>Settings</code>中一番翻找，在<code>File and Code Templates</code>中找到了解决办法。本文就是介绍通过文件模板批量创建文件的步骤。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"期望-最终效果演示\"><a href=\"#期望-最终效果演示\" class=\"headerlink\" title=\"期望+最终效果演示\"></a>期望+最终效果演示</h1><blockquote>\n<p>结果即需求</p>\n</blockquote>\n<p>先演示一下最终实现的效果，也就是最初的需求</p>\n<ol>\n<li>在包根目录下，右键——&gt;<code>New</code>——&gt;选择新设置的模板，<br><img data-src=\"/images/in-post/file-templates-in-IDEA/right-click-new-entity.webp\" alt=\"right click\"></li>\n<li>输入entity名，如<code>User</code>，首字母大写<br><img data-src=\"/images/in-post/file-templates-in-IDEA/input-entity.webp\" alt=\"input entity\"></li>\n<li>生成的如下文件：<ul>\n<li>entity/po : <code>User.java</code></li>\n<li>dao : <code>UserRepository.java</code></li>\n<li>service : <code>UserService.java</code></li>\n<li>service/impl : <code>UserServiceImpl.java</code></li>\n<li>controller : <code>UserController.java</code></li>\n</ul>\n</li>\n</ol>\n<p>对应的项目结构如下，下文的配置也是以这个结构为前提的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">src&#x2F;main&#x2F;java</span><br><span class=\"line\">└── com.github.quanqinle</span><br><span class=\"line\">        ├── Application.java</span><br><span class=\"line\">        ├── entity</span><br><span class=\"line\">        │   ├── po</span><br><span class=\"line\">        │   │   └── User.java</span><br><span class=\"line\">        │   └── vo</span><br><span class=\"line\">        ├── dao</span><br><span class=\"line\">        │   └── UserRepository.java</span><br><span class=\"line\">        ├── service</span><br><span class=\"line\">        │   ├── impl</span><br><span class=\"line\">        │   │   └── UserServiceImpl.java</span><br><span class=\"line\">        │   └── UserService.java</span><br><span class=\"line\">        └── controller</span><br><span class=\"line\">            └── UserController.java</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h1><p>先放一张最终的配置，就像下图中的(1)所示：</p>\n<p><img data-src=\"/images/in-post/file-templates-in-IDEA/final-settings.webp\" alt=\"final settings\"></p>\n<center style=\"color:#C0C0C0;\">图1</center> \n\n<h2 id=\"配置po模板\"><a href=\"#配置po模板\" class=\"headerlink\" title=\"配置po模板\"></a>配置po模板</h2><p>打开<code>Settings</code>窗口，找到<code>Editor</code>——&gt;<code>File and Code templates</code>，在<code>Files</code>分类下，点击<kbd>Create Template</kbd>，即图1的按钮(2)</p>\n<ul>\n<li>Name：右键创建时看到的名字，例<code>Create whole classes in package root</code></li>\n<li>Extension：默认的java</li>\n<li>File Name：文件路径和文件名（不用加.java后缀），<code>./entity/po/$&#123;Subject&#125;</code></li>\n<li>输入模板内容，如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">#set($SubjectOfLowerFirst = $&#123;Subject.substring(0,1).toLowerCase()&#125; + $Subject.substring(1))</span><br><span class=\"line\">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != &quot;&quot;)package $&#123;PACKAGE_NAME&#125;.entity.po;#end</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDateTime;</span><br><span class=\"line\"></span><br><span class=\"line\">#parse(&quot;File Header.java&quot;)</span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name = &quot;$&#123;SubjectOfLowerFirst&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> $</span>&#123;Subject&#125; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue(strategy = GenerationType.AUTO)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * name</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;create_time&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDateTime createTime;</span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;update_time&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDateTime updateTime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置dao模板\"><a href=\"#配置dao模板\" class=\"headerlink\" title=\"配置dao模板\"></a>配置dao模板</h2><p>选中第一步创建的<kbd>Create Template</kbd>前提下，点击<kbd>Create Child Template File</kbd>，即图1的按钮(3)</p>\n<ul>\n<li>File Name：文件路径和文件名（不用加.java后缀），<code>./dao/$&#123;Subject&#125;Repository</code></li>\n<li>Extension：默认的java</li>\n<li>输入模板内容，如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">#set($SubjectOfLowerFirst = $&#123;Subject.substring(0,1).toLowerCase()&#125; + $Subject.substring(1))</span><br><span class=\"line\">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != &quot;&quot;)package $&#123;PACKAGE_NAME&#125;.dao;#end</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> $&#123;PACKAGE_NAME&#125;.entity.po.$&#123;Subject&#125;;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Repository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">#parse(&quot;File Header.java&quot;)</span><br><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> $</span>&#123;Subject&#125;Repository extends JpaRepository&lt;$&#123;Subject&#125;, Long&gt; &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置service模板\"><a href=\"#配置service模板\" class=\"headerlink\" title=\"配置service模板\"></a>配置service模板</h2><p>选中第一步创建的<kbd>Create Template</kbd>前提下，点击<kbd>Create Child Template File</kbd>，即图1的按钮(3)</p>\n<ul>\n<li>File Name：文件路径和文件名（不用加.java后缀），<code>./service/$&#123;Subject&#125;Service</code></li>\n<li>Extension：默认的java</li>\n<li>输入模板内容，如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">#set($SubjectOfLowerFirst = $&#123;Subject.substring(0,1).toLowerCase()&#125; + $Subject.substring(1))</span><br><span class=\"line\">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != &quot;&quot;)package $&#123;PACKAGE_NAME&#125;.service;#end</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> $&#123;PACKAGE_NAME&#125;.entity.po.$&#123;Subject&#125;;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Optional;</span><br><span class=\"line\"></span><br><span class=\"line\">#parse(&quot;File Header.java&quot;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> $</span>&#123;Subject&#125;Service &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * insert</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $&#123;SubjectOfLowerFirst&#125; a $&#123;Subject&#125; object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    $&#123;Subject&#125; insert($&#123;Subject&#125; $&#123;SubjectOfLowerFirst&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * update</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $&#123;SubjectOfLowerFirst&#125; a $&#123;Subject&#125; object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    $&#123;Subject&#125; update($&#123;Subject&#125; $&#123;SubjectOfLowerFirst&#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * query by id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id $&#123;Subject&#125; id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Optional&lt;$&#123;Subject&#125;&gt; queryById(Long id);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * delete by id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id $&#123;Subject&#125; id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">deleteById</span><span class=\"params\">(Long id)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置service-implement模板\"><a href=\"#配置service-implement模板\" class=\"headerlink\" title=\"配置service implement模板\"></a>配置service implement模板</h2><p>选中第一步创建的<kbd>Create Template</kbd>前提下，点击<kbd>Create Child Template File</kbd>，即图1的按钮(3)</p>\n<ul>\n<li>File Name：文件路径和文件名（不用加.java后缀），<code>./service/impl/$&#123;Subject&#125;ServiceImpl</code></li>\n<li>Extension：默认的java</li>\n<li>输入模板内容，如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#set($SubjectOfLowerFirst &#x3D; $&#123;Subject.substring(0,1).toLowerCase()&#125; + $Subject.substring(1))</span><br><span class=\"line\">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; !&#x3D; &quot;&quot;)package $&#123;PACKAGE_NAME&#125;.service.impl;#end</span><br><span class=\"line\"></span><br><span class=\"line\">import $&#123;PACKAGE_NAME&#125;.dao.$&#123;Subject&#125;Repository;</span><br><span class=\"line\">import $&#123;PACKAGE_NAME&#125;.entity.po.$&#123;Subject&#125;;</span><br><span class=\"line\">import $&#123;PACKAGE_NAME&#125;.service.$&#123;Subject&#125;Service;</span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\">import org.springframework.transaction.annotation.Transactional;</span><br><span class=\"line\">import java.util.Optional;</span><br><span class=\"line\"></span><br><span class=\"line\">#parse(&quot;File Header.java&quot;)</span><br><span class=\"line\">@Service</span><br><span class=\"line\">@Transactional(rollbackFor &#x3D; Exception.class)</span><br><span class=\"line\">public class $&#123;Subject&#125;ServiceImpl implements $&#123;Subject&#125;Service &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Logger log &#x3D; LoggerFactory.getLogger($&#123;Subject&#125;Service.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private $&#123;Subject&#125;Repository repository;</span><br><span class=\"line\"></span><br><span class=\"line\">    public $&#123;Subject&#125;ServiceImpl() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public $&#123;Subject&#125; insert($&#123;Subject&#125; $&#123;SubjectOfLowerFirst&#125;) &#123;</span><br><span class=\"line\">        return repository.save($&#123;SubjectOfLowerFirst&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public $&#123;Subject&#125; update($&#123;Subject&#125; $&#123;SubjectOfLowerFirst&#125;) &#123;</span><br><span class=\"line\">        return repository.save($&#123;SubjectOfLowerFirst&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean deleteById(Long id) &#123;</span><br><span class=\"line\">        Boolean result &#x3D; true;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            repository.deleteById(id);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            result &#x3D; false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Optional&lt;$&#123;Subject&#125;&gt; queryById(Long id) &#123;</span><br><span class=\"line\">        return repository.findById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置controller模板\"><a href=\"#配置controller模板\" class=\"headerlink\" title=\"配置controller模板\"></a>配置controller模板</h2><p>选中第一步创建的<kbd>Create Template</kbd>前提下，点击<kbd>Create Child Template File</kbd>，即图1的按钮(3)</p>\n<ul>\n<li>File Name：文件路径和文件名（不用加.java后缀），<code>./controller/$&#123;Subject&#125;Controller</code></li>\n<li>Extension：默认的java</li>\n<li>输入模板内容，如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#set($SubjectOfLowerFirst &#x3D; $&#123;Subject.substring(0,1).toLowerCase()&#125; + $Subject.substring(1))</span><br><span class=\"line\">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; !&#x3D; &quot;&quot;)package $&#123;PACKAGE_NAME&#125;.controller;#end</span><br><span class=\"line\"></span><br><span class=\"line\">import $&#123;PACKAGE_NAME&#125;.entity.Result;</span><br><span class=\"line\">import $&#123;PACKAGE_NAME&#125;.entity.po.$&#123;Subject&#125;;</span><br><span class=\"line\">import $&#123;PACKAGE_NAME&#125;.service.$&#123;Subject&#125;Service;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.*;</span><br><span class=\"line\">import javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\">#parse(&quot;File Header.java&quot;)</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">@RequestMapping(&quot;api&#x2F;$&#123;SubjectOfLowerFirst&#125;&quot;)</span><br><span class=\"line\">public class $&#123;Subject&#125;Controller &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Resource</span><br><span class=\"line\">    private $&#123;Subject&#125;Service $&#123;SubjectOfLowerFirst&#125;Service;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PostMapping</span><br><span class=\"line\">    public Result&lt;$&#123;Subject&#125;&gt; create(@RequestBody $&#123;Subject&#125; record) &#123;</span><br><span class=\"line\">        $&#123;Subject&#125; $&#123;SubjectOfLowerFirst&#125; &#x3D; $&#123;SubjectOfLowerFirst&#125;Service.insert(record);</span><br><span class=\"line\">        return Result.success($&#123;SubjectOfLowerFirst&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PutMapping</span><br><span class=\"line\">    public Result&lt;$&#123;Subject&#125;&gt; update(@RequestBody $&#123;Subject&#125; record) &#123;</span><br><span class=\"line\">        $&#123;Subject&#125; $&#123;SubjectOfLowerFirst&#125; &#x3D; $&#123;SubjectOfLowerFirst&#125;Service.update(record);</span><br><span class=\"line\">        return Result.success($&#123;SubjectOfLowerFirst&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @DeleteMapping(&quot;&#123;id&#125;&quot;)</span><br><span class=\"line\">    public Result&lt;Void&gt; deleteById(@PathVariable Long id) &#123;</span><br><span class=\"line\">        boolean success &#x3D; $&#123;SubjectOfLowerFirst&#125;Service.deleteById(id);</span><br><span class=\"line\">        return success ? Result.success() : Result.fail();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(&quot;&#123;id&#125;&quot;)</span><br><span class=\"line\">    public Result&lt;$&#123;Subject&#125;&gt; queryById(@PathVariable Long id) &#123;</span><br><span class=\"line\">        var optional &#x3D; $&#123;SubjectOfLowerFirst&#125;Service.queryById(id);</span><br><span class=\"line\">        if (optional.isPresent()) &#123;</span><br><span class=\"line\">            return Result.success(optional.get());</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return Result.success();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>保存配置。</p>\n","categories":["Code"],"tags":["Spring Boot","Java","IDEA"]}]